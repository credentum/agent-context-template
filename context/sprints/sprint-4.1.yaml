---
schema_version: 1.0.0
created_date: '2025-07-14'
document_type: sprint
end_date: '2025-07-21'
goals:
- Establish reproducible local development infrastructure
- Set up CI service containers for reliable testing
- Implement health checks and automation for infrastructure
- Ensure platform-agnostic Docker setup
id: sprint-41
last_modified: '2025-07-25'
last_referenced: '2025-07-16'
phases:
- component: infra
  description: Create reproducible Docker Compose stack for Qdrant and Neo4j
  name: Docker Infrastructure Setup
  phase: 1
  priority: high
  status: completed
  tasks:
  - dependencies: []
    description: "Author a reproducible Docker Compose stack pinned to\nQdrant v1.14.x\
      \ and Neo4j 5.20.\n\n## Acceptance Criteria\n- [x] File `infra/docker-compose.yml`\
      \ exists.\n- [x] `make up` starts Qdrant (6333) and Neo4j (7474/7687);\n   \
      \   `make down` stops & removes volumes.\n- [x] Named volumes `qdrant_data`,\
      \ `neo4j_data` created.\n- [x] Neo4j runs with `NEO4J_AUTH=none` for dev.\n\
      - [x] README updates include quick-start prerequisites.\n\n## Implementation\
      \ Notes\n- mkdir -p infra\n- Populate compose with pinned images and volumes\n\
      - Ensure platform-agnostic (linux/amd64 & linux/arm64) tags\n  if available.\n"
    estimate: 4 hours
    github_issue: 28
    labels:
    - sprint-current
    - phase:4.1
    - component:infra
    - priority:high
    title: Draft docker-compose.yml for Qdrant v1.14.x & Neo4j 5.20
- component: infra
  description: Add health check scripts to verify infrastructure status
  name: Health Check Implementation
  phase: 2
  priority: high
  status: pending
  tasks:
  - dependencies:
    - Draft docker-compose.yml for Qdrant v1.14.x & Neo4j 5.20
    description: "Create a bash script verifying Qdrant and Neo4j are healthy\nafter\
      \ `make up`.\n\n## Acceptance Criteria\n- [ ] `infra/healthcheck.sh` exits 0\
      \ on healthy stack.\n- [ ] Script checks:\n  curl localhost:6333/collections\
      \ => `[]`\n  python -c \"from neo4j import GraphDatabase;\n  GraphDatabase.driver('bolt://localhost:7687').\n\
      \  verify_connectivity()\"\n- [ ] Neo4j driver added to `requirements-dev.txt`.\n\
      - [ ] CONTRIBUTING updated with run instructions.\n\n## Implementation Notes\n\
      - chmod +x infra/healthcheck.sh\n- add to Makefile: make health\n"
    estimate: 2 hours
    github_issue: 29
    labels:
    - sprint-current
    - phase:4.1
    - component:infra
    - priority:high
    title: Add infra/healthcheck.sh smoke test
- component: ci
  description: Configure GitHub Actions to use service containers
  name: CI Integration
  phase: 3
  priority: high
  status: pending
  tasks:
  - dependencies:
    - Draft docker-compose.yml for Qdrant v1.14.x & Neo4j 5.20
    description: "Spin up Qdrant and Neo4j as service containers in CI to run\nall\
      \ test jobs against live stores.\n\n## Acceptance Criteria\n- [ ] `ci.yml` includes\
      \ `services:` for Qdrant v1.14.x and\n  Neo4j 5.20.\n- [ ] Tests run green on\
      \ live services.\n- [ ] Docker layers cached; total CI spin-up < 4 minutes.\n\
      \n## Implementation Notes\n- Use GitHub Actions service-container syntax\n-\
      \ Ensure ports match compose stack.\n"
    estimate: 3 hours
    github_issue: 30
    labels:
    - sprint-current
    - phase:4.1
    - component:ci
    - priority:high
    title: Configure GitHub Actions service containers
- component: vector
  description: Validate infrastructure with real data processing
  name: Validation & Testing
  phase: 4
  priority: medium
  status: pending
  tasks:
  - dependencies:
    - Draft docker-compose.yml for Qdrant v1.14.x & Neo4j 5.20
    - Configure GitHub Actions service containers
    description: "Index README.md via embed pipeline and confirm both vector\nand\
      \ graph entries exist.\n\n## Acceptance Criteria\n- [ ] New test `tests/smoke/test_embed_readme.py`\
      \ passes.\n- [ ] Qdrant vector count >= 1; corresponding Neo4j node\n  present.\n\
      \n## Implementation Notes\n- pytest -k test_embed_readme\n- use qdrant_client\
      \ & neo4j driver inside test.\n"
    estimate: 2 hours
    github_issue: 31
    labels:
    - sprint-current
    - phase:4.1
    - component:vector
    - priority:medium
    title: Embedder sanity test with README.md
- component: dx
  description: Improve local development workflow
  name: Developer Experience
  phase: 5
  priority: low
  status: pending
  tasks:
  - dependencies:
    - Draft docker-compose.yml for Qdrant v1.14.x & Neo4j 5.20
    - Add infra/healthcheck.sh smoke test
    description: 'Provide `make up`, `make down`, `make health` for local

      development.


      ## Acceptance Criteria

      - [ ] Make targets wrap docker-compose and healthcheck script.

      - [ ] Root README documents usage.


      ## Implementation Notes

      - .PHONY: up down health

      '
    estimate: 1 hour
    github_issue: 32
    labels:
    - sprint-current
    - phase:4.1
    - component:dx
    - priority:low
    title: Makefile convenience targets
- component: security
  description: Implement supply-chain security for infrastructure
  name: Security
  phase: 6
  priority: medium
  status: pending
  tasks:
  - dependencies: []
    description: "Begin supply-chain integrity chain for infra artefacts using\nSigstore/cosign.\n\
      \n## Acceptance Criteria\n- [ ] cosign signatures committed under\n  `context/logs/signatures/infra/`.\n\
      - [ ] CI step verifies signatures before tests execute.\n\n## Implementation\
      \ Notes\n- cosign sign --key k.json docker.io/qdrant/qdrant@sha256:...\n- cosign\
      \ verify ...\n"
    estimate: 3 hours
    github_issue: 33
    labels:
    - sprint-current
    - phase:4.1
    - component:security
    - priority:medium
    title: Sigstore sign compose & images
- component: agents
  description: Fix critical bugs affecting user experience
  name: Bug Fixes
  phase: 7
  priority: high
  status: pending
  tasks:
  - dependencies: []
    description: "Fix the sprint issue linker's `_sync_issue_labels()` method\nthat\
      \ currently makes individual GitHub API calls for each label\noperation, causing\
      \ multiple comments when creating/updating\nissues with many labels.\n\n## Problem\
      \ Analysis\nThe current implementation calls `gh issue edit` separately for\n\
      each label:\n- One subprocess call per label to add (lines 527-530)\n- One subprocess\
      \ call per label to remove (lines 532-535)\n- With 8-12+ labels per task, this\
      \ creates 8-12+ GitHub API\n  calls\n- Each call can trigger comment creation,\
      \ leading to comment\n  spam\n\n## Acceptance Criteria\n- [ ] Batch all label\
      \ additions into single `gh issue edit\n  --add-label label1,label2,label3`\
      \ call\n- [ ] Batch all label removals into single `gh issue edit\n  --remove-label\
      \ label1,label2,label3` call\n- [ ] Reduce API calls from ~10+ per issue to\
      \ maximum 2 per\n  issue\n- [ ] Add exponential backoff retry logic for GitHub\
      \ API\n  failures\n- [ ] Add label count warnings when approaching GitHub limits\n\
      - [ ] Test with high-label-count scenarios (sprint 4.1 tasks)\n- [ ] Verify\
      \ no duplicate comments are created\n- [ ] Ensure bidirectional sync still works\
      \ correctly\n- [ ] Preserve existing dry-run and verbose logging\n  functionality\n\
      \n## Implementation Notes\n- Modify `_sync_issue_labels()` method in\n  `src/agents/sprint_issue_linker.py`\n\
      - GitHub CLI supports comma-separated labels: `--add-label\n  label1,label2,label3`\n\
      - Add comprehensive unit tests for batching behavior\n- Test with current sprint-4.1\
      \ tasks that have extensive labels\n"
    estimate: 3 hours
    github_issue: 79
    labels:
    - sprint-current
    - phase:4.1
    - component:agents
    - priority:high
    - type:bug
    - scope:github-api
    title: Fix Sprint Issue Linker Label Batching
- component: testing
  name: Bidirectional Workflow Testing
  phase: 8
  priority: high
  status: pending
sprint_number: 41
start_date: '2025-07-14'
status: in_progress
title: 'Sprint 4.1: Infrastructure Bring-Up'
