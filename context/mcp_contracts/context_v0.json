{
  "$schema": "http://json-schema.org/draft-07/schema#",
  "$id": "https://agent-context-template.example.com/mcp/contracts/context_v0.json",
  "title": "Agent Context MCP Contract v0",
  "description": "Model Context Protocol contract for agent context management operations",
  "version": "0.1.0",
  "type": "object",
  "properties": {
    "tools": {
      "type": "array",
      "description": "Available MCP tools for context management",
      "items": {
        "oneOf": [
          {
            "$ref": "#/definitions/store_context"
          },
          {
            "$ref": "#/definitions/retrieve_context"
          },
          {
            "$ref": "#/definitions/get_agent_state"
          }
        ]
      }
    }
  },
  "required": ["tools"],
  "definitions": {
    "store_context": {
      "type": "object",
      "description": "Store context data in the agent context system",
      "properties": {
        "name": {
          "type": "string",
          "const": "store_context"
        },
        "description": {
          "type": "string",
          "const": "Store context data with optional metadata and TTL"
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "object"
            },
            "properties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "string"
                    },
                    "description": {
                      "type": "string",
                      "const": "Unique identifier for the context item"
                    }
                  },
                  "required": ["type", "description"]
                },
                "value": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "enum": ["string", "object", "array"]
                    },
                    "description": {
                      "type": "string",
                      "const": "Context data to store"
                    }
                  },
                  "required": ["type", "description"]
                },
                "metadata": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "object"
                    },
                    "description": {
                      "type": "string",
                      "const": "Optional metadata for the context item"
                    }
                  },
                  "required": ["type", "description"]
                },
                "ttl": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "integer"
                    },
                    "description": {
                      "type": "string",
                      "const": "Time to live in seconds (optional)"
                    },
                    "minimum": {
                      "type": "integer",
                      "const": 1
                    }
                  },
                  "required": ["type", "description"]
                }
              },
              "required": ["key", "value"]
            },
            "required": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "const": ["key", "value"]
            }
          },
          "required": ["type", "properties", "required"]
        }
      },
      "required": ["name", "description", "inputSchema"]
    },
    "retrieve_context": {
      "type": "object",
      "description": "Retrieve context data from the agent context system",
      "properties": {
        "name": {
          "type": "string",
          "const": "retrieve_context"
        },
        "description": {
          "type": "string",
          "const": "Retrieve context data by key or semantic query"
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "object"
            },
            "properties": {
              "type": "object",
              "properties": {
                "key": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "string"
                    },
                    "description": {
                      "type": "string",
                      "const": "Specific key to retrieve (optional)"
                    }
                  },
                  "required": ["type", "description"]
                },
                "query": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "string"
                    },
                    "description": {
                      "type": "string",
                      "const": "Semantic query for context search (optional)"
                    }
                  },
                  "required": ["type", "description"]
                },
                "limit": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "integer"
                    },
                    "description": {
                      "type": "string",
                      "const": "Maximum number of results to return"
                    },
                    "default": {
                      "type": "integer",
                      "const": 10
                    },
                    "minimum": {
                      "type": "integer",
                      "const": 1
                    },
                    "maximum": {
                      "type": "integer",
                      "const": 100
                    }
                  },
                  "required": ["type", "description", "default"]
                },
                "include_metadata": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "boolean"
                    },
                    "description": {
                      "type": "string",
                      "const": "Whether to include metadata in results"
                    },
                    "default": {
                      "type": "boolean",
                      "const": false
                    }
                  },
                  "required": ["type", "description", "default"]
                }
              },
              "required": []
            },
            "required": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "const": []
            }
          },
          "required": ["type", "properties", "required"]
        }
      },
      "required": ["name", "description", "inputSchema"]
    },
    "get_agent_state": {
      "type": "object",
      "description": "Get current agent state information",
      "properties": {
        "name": {
          "type": "string",
          "const": "get_agent_state"
        },
        "description": {
          "type": "string",
          "const": "Retrieve current agent state and session information"
        },
        "inputSchema": {
          "type": "object",
          "properties": {
            "type": {
              "type": "string",
              "const": "object"
            },
            "properties": {
              "type": "object",
              "properties": {
                "include_session": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "boolean"
                    },
                    "description": {
                      "type": "string",
                      "const": "Whether to include session details"
                    },
                    "default": {
                      "type": "boolean",
                      "const": true
                    }
                  },
                  "required": ["type", "description", "default"]
                },
                "include_metrics": {
                  "type": "object",
                  "properties": {
                    "type": {
                      "type": "string",
                      "const": "boolean"
                    },
                    "description": {
                      "type": "string",
                      "const": "Whether to include performance metrics"
                    },
                    "default": {
                      "type": "boolean",
                      "const": false
                    }
                  },
                  "required": ["type", "description", "default"]
                }
              },
              "required": []
            },
            "required": {
              "type": "array",
              "items": {
                "type": "string"
              },
              "const": []
            }
          },
          "required": ["type", "properties", "required"]
        }
      },
      "required": ["name", "description", "inputSchema"]
    }
  },
  "examples": {
    "store_context": {
      "description": "Examples of store_context tool usage",
      "examples": [
        {
          "name": "Store simple text context",
          "input": {
            "key": "user-preference-theme",
            "value": "dark-mode"
          },
          "description": "Store a simple key-value pair"
        },
        {
          "name": "Store complex object with metadata",
          "input": {
            "key": "sprint-status",
            "value": {
              "current_sprint": "sprint-5",
              "phase": "Phase 5",
              "completion": 0.3,
              "blockers": ["issue-34", "issue-42"]
            },
            "metadata": {
              "type": "sprint_tracking",
              "project": "agent-context-template",
              "created_by": "agent-sprint-tracker"
            },
            "ttl": 604800
          },
          "description": "Store complex sprint data with metadata and 7-day TTL"
        },
        {
          "name": "Store temporary session data",
          "input": {
            "key": "session-temp-data",
            "value": ["item1", "item2", "item3"],
            "ttl": 3600
          },
          "description": "Store temporary array data with 1-hour TTL"
        }
      ]
    },
    "retrieve_context": {
      "description": "Examples of retrieve_context tool usage",
      "examples": [
        {
          "name": "Retrieve by exact key",
          "input": {
            "key": "user-preference-theme"
          },
          "expected_output": {
            "key": "user-preference-theme",
            "value": "dark-mode",
            "found": true
          },
          "description": "Retrieve a specific context item by its key"
        },
        {
          "name": "Semantic search with metadata",
          "input": {
            "query": "sprint status and blockers",
            "limit": 5,
            "include_metadata": true
          },
          "expected_output": {
            "results": [
              {
                "key": "sprint-status",
                "value": {
                  "current_sprint": "sprint-5",
                  "phase": "Phase 5",
                  "completion": 0.3,
                  "blockers": ["issue-34", "issue-42"]
                },
                "metadata": {
                  "type": "sprint_tracking",
                  "project": "agent-context-template",
                  "created_by": "agent-sprint-tracker"
                },
                "score": 0.95
              }
            ],
            "total_found": 1
          },
          "description": "Search for sprint-related context with metadata included"
        },
        {
          "name": "Limited search without metadata",
          "input": {
            "query": "user preferences",
            "limit": 3,
            "include_metadata": false
          },
          "expected_output": {
            "results": [
              {
                "key": "user-preference-theme",
                "value": "dark-mode",
                "score": 0.87
              }
            ],
            "total_found": 1
          },
          "description": "Search for user preference data without metadata"
        }
      ]
    },
    "get_agent_state": {
      "description": "Examples of get_agent_state tool usage",
      "examples": [
        {
          "name": "Get basic agent state",
          "input": {},
          "expected_output": {
            "agent_id": "claude-code-agent",
            "status": "active",
            "session": {
              "id": "session-123456",
              "started_at": "2025-07-15T10:30:00Z",
              "duration_seconds": 1800,
              "context_items_stored": 15,
              "last_activity": "2025-07-15T11:00:00Z"
            },
            "capabilities": ["store_context", "retrieve_context", "get_agent_state"],
            "version": "1.0.0"
          },
          "description": "Get current agent state with session details"
        },
        {
          "name": "Get agent state with metrics",
          "input": {
            "include_session": true,
            "include_metrics": true
          },
          "expected_output": {
            "agent_id": "claude-code-agent",
            "status": "active",
            "session": {
              "id": "session-123456",
              "started_at": "2025-07-15T10:30:00Z",
              "duration_seconds": 1800,
              "context_items_stored": 15,
              "last_activity": "2025-07-15T11:00:00Z"
            },
            "metrics": {
              "total_stores": 42,
              "total_retrievals": 23,
              "avg_response_time_ms": 150,
              "cache_hit_rate": 0.85,
              "storage_usage_bytes": 2048576
            },
            "capabilities": ["store_context", "retrieve_context", "get_agent_state"],
            "version": "1.0.0"
          },
          "description": "Get agent state with performance metrics included"
        },
        {
          "name": "Get minimal agent state",
          "input": {
            "include_session": false,
            "include_metrics": false
          },
          "expected_output": {
            "agent_id": "claude-code-agent",
            "status": "active",
            "capabilities": ["store_context", "retrieve_context", "get_agent_state"],
            "version": "1.0.0"
          },
          "description": "Get minimal agent state without session or metrics"
        }
      ]
    }
  }
}
