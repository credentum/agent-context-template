# Dockerfile.ci - Simulate CI environment locally
# Using pinned digest for supply-chain security
FROM python:3.11-slim@sha256:139020233cc412efe4c8135b0efe1c7569dc8b28ddd88bddb109b764f8977e30

# Install system dependencies (matching GitHub CI environment)
# Including tini for proper PID 1 signal handling
RUN apt-get update && apt-get install -y \
    git \
    curl \
    redis-tools \
    bc \
    jq \
    tini \
    && rm -rf /var/lib/apt/lists/*

# Set working directory
WORKDIR /app

# Copy requirements files
COPY requirements*.txt ./

# Cache optimization: Install dependencies with better layer caching
RUN --mount=type=cache,target=/root/.cache/pip \
    pip install --upgrade pip && \
    pip install -r requirements.txt && \
    pip install -r requirements-dev.txt && \
    pip install -r requirements-test.txt

# Verify critical tools are available (matching GitHub CI verification)
RUN echo "üîç Verifying required tools are available..." && \
    python -c "import black, isort, flake8, mypy" && \
    which black && \
    which isort && \
    which flake8 && \
    which mypy && \
    which pytest && \
    which coverage && \
    echo "‚úÖ All tools verified"

# Copy the rest of the application
COPY . .

# Create necessary directories (matching GitHub CI)
RUN mkdir -p context/.duckdb \
    context/.graph_cache \
    context/.vector_cache \
    context/.embeddings_cache \
    context/trace \
    context/archive \
    context/mcp_contracts \
    context/logs/cleanup \
    context/logs/eval \
    context/logs/kv \
    context/logs/prompts \
    context/logs/signatures

# Set environment variables (matching GitHub CI)
ENV CI=true
ENV PYTHONUNBUFFERED=1
ENV PYTHONPATH=/app

# Use tini as entrypoint for proper signal handling
ENTRYPOINT ["/usr/bin/tini", "--"]

# Default command runs all CI checks
CMD ["/bin/bash", "scripts/test-like-ci.sh"]
