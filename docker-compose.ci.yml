# docker-compose.ci.yml - Run CI environment locally exactly like GitHub Actions
---

services:
  # Run all CI lint checks (default)
  ci-lint:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    container_name: ci-lint-runner
    volumes:
      # Mount source code for real-time changes (read-only)
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
      - ./context:/app/context
      - ./.github:/app/.github:ro
      # Mount config files
      - ./mypy.ini:/app/mypy.ini:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml:ro
      - ./.yamllint-workflows.yml:/app/.yamllint-workflows.yml:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: /bin/bash scripts/test-comprehensive-ci.sh

  # Run specific checks individually
  ci-black:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: black --check src/ tests/ scripts/

  ci-isort:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: isort --check-only --profile black src/ tests/ scripts/

  ci-flake8:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: >
      flake8 src/ tests/ scripts/ --max-line-length=100
      --extend-ignore=E203,W503

  ci-mypy:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./mypy.ini:/app/mypy.ini:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: mypy src/ --config-file=mypy.ini

  ci-context-lint:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./context:/app/context
    environment:
      - CI=true
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: python -m src.agents.context_lint validate context/

  ci-import-check:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
    environment:
      - CI=true
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: python -m pytest --collect-only -q

  # Service for interactive debugging
  ci-debug:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml
      - ./pyproject.toml:/app/pyproject.toml
      - ./mypy.ini:/app/mypy.ini
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CI=true
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: /bin/bash
    stdin_open: true
    tty: true

  # Test GitHub Actions workflows (simple version)
  ci-workflow-simple:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
      - ./context:/app/context
      - ./.github:/app/.github:ro
      - ./infra:/app/infra:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: /bin/bash scripts/test-workflow-simple.sh

  # Test coverage like GitHub Actions
  ci-coverage:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
      - ./context:/app/context
      - ./.coverage-config.json:/app/.coverage-config.json:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./pytest.ini:/app/pytest.ini:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    depends_on:
      - redis
    command: /bin/bash scripts/test-coverage-like-ci.sh

  # Test unit tests like GitHub Actions
  ci-unit-tests:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
      - ./context:/app/context
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./pytest.ini:/app/pytest.ini:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    depends_on:
      - redis
    command: /bin/bash scripts/test-unit-like-ci.sh

  # Test suite like GitHub Actions
  ci-test-suite:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src:ro
      - ./tests:/app/tests:ro
      - ./scripts:/app/scripts:ro
      - ./context:/app/context
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./pytest.ini:/app/pytest.ini:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    depends_on:
      - redis
    command: /bin/bash scripts/test-suite-like-ci.sh

  # Qdrant service for workflow tests
  qdrant:
    image: qdrant/qdrant@sha256:9d1eefc5f6fb4f20ba1b9de8862c85ce5b12b47c75ed2abac5e6c2c8bb2b6a92  # yamllint disable-line rule:line-length
    ports:
      - "6335:6333"
      - "6336:6334"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:6333/collections"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Neo4j service for workflow tests
  neo4j:
    image: neo4j@sha256:b98e15a2b3c5b1b8e6e5f7e20a4a8b8c9d1e2f3a4b5c6d7e8f9a0b1c2d3e4f5  # yamllint disable-line rule:line-length
    ports:
      - "7688:7687"
      - "7475:7474"
    environment:
      - NEO4J_AUTH=neo4j/testpassword
      - NEO4J_ACCEPT_LICENSE_AGREEMENT=yes
      - NEO4J_PLUGINS=["apoc"]
      - NEO4J_dbms_security_procedures_unrestricted=apoc.*
      # Memory optimization for CI
      - NEO4J_dbms_memory_heap_initial__size=512m
      - NEO4J_dbms_memory_heap_max__size=1G
    healthcheck:
      test:
        - "CMD"
        - "cypher-shell"
        - "-u"
        - "neo4j"
        - "-p"
        - "testpassword"
        - "RETURN 1"
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis service for tests that need it
  redis:
    image: redis@sha256:af1d0fc3f63b02b13ff7906c9baf7c5b390b8881ca08119cd570677fe2f60b55  # yamllint disable-line rule:line-length
    ports:
      - "6379:6379"
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 5
