# docker-compose.ci.yml - CI environment configuration
# Extends base docker-compose.yml with CI-specific services and optimizations
---

# Docker image references with SHA pinning for security
x-images:
  qdrant: &qdrant-image qdrant/qdrant:v1.14.1@sha256:419d72603f5346ee22ffc4606bdb7beb52fcb63077766fab678e6622ba247366  # yamllint disable-line rule:line-length
  neo4j: &neo4j-image neo4j:5.20.0@sha256:52d3dec8d45585b21edeca8517d752b2512e52aa94f80fc36a5788c88c95f8e4  # yamllint disable-line rule:line-length
  redis: &redis-image redis@sha256:af1d0fc3f63b02b13ff7906c9baf7c5b390b8881ca08119cd570677fe2f60b55  # yamllint disable-line rule:line-length

services:
  # Run all CI lint checks (default)
  ci-lint:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    container_name: ci-lint-runner
    volumes:
      # Mount source code for real-time changes
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.github:/app/.github:ro
      # Mount config files
      - ./mypy.ini:/app/mypy.ini:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml:ro
      - ./.yamllint-workflows.yml:/app/.yamllint-workflows.yml:ro
      - ./.flake8:/app/.flake8:ro
      # Mount test artifacts directory for two-phase CI
      - ./test-artifacts:/app/test-artifacts
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: ["/bin/bash", "scripts/test-comprehensive-ci.sh"]
    stop_signal: SIGTERM
    stop_grace_period: 720s
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M

  # Run specific checks individually
  ci-black:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: black --check src/ tests/ scripts/
    stop_signal: SIGTERM
    stop_grace_period: 10s

  ci-isort:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: isort --check-only --profile black src/ tests/ scripts/
    stop_signal: SIGTERM
    stop_grace_period: 10s

  ci-flake8:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./.flake8:/app/.flake8:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: flake8 src/ tests/ scripts/
    stop_signal: SIGTERM
    stop_grace_period: 10s

  ci-mypy:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./mypy.ini:/app/mypy.ini:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: mypy src/ --config-file=mypy.ini
    stop_signal: SIGTERM
    stop_grace_period: 10s

  ci-context-lint:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./context:/app/context
    environment:
      - CI=true
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: python -m src.agents.context_lint validate context/
    stop_signal: SIGTERM
    stop_grace_period: 10s

  ci-import-check:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
    environment:
      - CI=true
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: python -m pytest --collect-only -q
    stop_signal: SIGTERM
    stop_grace_period: 10s

  # Service for interactive debugging
  ci-debug:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.claude:/app/.claude
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml
      - ./pyproject.toml:/app/pyproject.toml
      - ./mypy.ini:/app/mypy.ini
    environment:
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CI=true
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: /bin/bash
    stdin_open: true
    tty: true
    stop_signal: SIGTERM
    stop_grace_period: 10s

  # Test GitHub Actions workflows (simple version)
  ci-workflow-simple:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.github:/app/.github:ro
      - ./infra:/app/infra:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: /bin/bash scripts/test-workflow-simple.sh
    stop_signal: SIGTERM
    stop_grace_period: 30s

  # Test coverage like GitHub Actions
  ci-coverage:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.claude:/app/.claude:ro
      - ./.coverage-config.json:/app/.coverage-config.json:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./pytest.ini:/app/pytest.ini:ro
      # Mount test artifacts directory for two-phase CI
      - ./test-artifacts:/app/test-artifacts
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    depends_on:
      - redis
    command: /bin/bash scripts/test-coverage-like-ci.sh
    stop_signal: SIGTERM
    stop_grace_period: 30s

  # Test unit tests like GitHub Actions
  ci-unit-tests:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.claude:/app/.claude:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./pytest.ini:/app/pytest.ini:ro
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    depends_on:
      - redis
    command: /bin/bash scripts/test-unit-like-ci.sh
    stop_signal: SIGTERM
    stop_grace_period: 30s

  # Test suite like GitHub Actions
  ci-test-suite:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.claude:/app/.claude:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./pytest.ini:/app/pytest.ini:ro
    deploy:
      resources:
        limits:
          cpus: '2'
          memory: 2G
        reservations:
          cpus: '0.5'
          memory: 512M
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - REDIS_HOST=redis
      - REDIS_PORT=6379
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    depends_on:
      - redis
    command: /bin/bash scripts/test-suite-like-ci.sh
    stop_signal: SIGTERM
    stop_grace_period: 30s

  # Quick essential checks for Claude's 2-minute timeout
  ci-quick:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.github:/app/.github:ro
      - ./mypy.ini:/app/mypy.ini:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml:ro
      - ./.flake8:/app/.flake8:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: ["/bin/bash", "scripts/test-quick-ci.sh"]
    stop_signal: SIGTERM
    stop_grace_period: 120s

  # Fast lint checks only (Black, isort, Flake8)
  ci-lint-fast:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./.flake8:/app/.flake8:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: ["/bin/bash", "scripts/test-lint-fast.sh"]
    stop_signal: SIGTERM
    stop_grace_period: 120s

  # Fixed MyPy service with proper configuration
  ci-mypy-fixed:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./mypy.ini:/app/mypy.ini:ro
    environment:
      - CI=true
      - PYTHONUNBUFFERED=1
      - PYTHONPATH=/app
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: mypy src/ --config-file=mypy.ini --explicit-package-bases
    stop_signal: SIGTERM
    stop_grace_period: 120s

  # Pre-commit hooks service
  ci-precommit:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./.github:/app/.github:ro
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml:ro
      - ./mypy.ini:/app/mypy.ini:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./.flake8:/app/.flake8:ro
      - ./.yamllint-workflows.yml:/app/.yamllint-workflows.yml:ro
      - ./.yamllint-schemas.yml:/app/.yamllint-schemas.yml:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: /bin/bash scripts/run-precommit-with-overlay.sh
    stop_signal: SIGTERM
    stop_grace_period: 120s

  # Enhanced parallel lint service (from optimized version)
  ci-lint-parallel:
    build:
      context: .
      dockerfile: Dockerfile.ci
    image: agent-context-ci:latest
    volumes:
      - ./src:/app/src
      - ./tests:/app/tests
      - ./scripts:/app/scripts
      - ./context:/app/context
      - ./mypy.ini:/app/mypy.ini:ro
      - ./pyproject.toml:/app/pyproject.toml:ro
      - ./.pre-commit-config.yaml:/app/.pre-commit-config.yaml:ro
      - ./.flake8:/app/.flake8:ro
    environment:
      - PYTHONPATH=/app
      - CI=true
      - PYTHONUNBUFFERED=1
      - CACHE_VERSION=v2025-07-16
      - PYTHON_VERSION=3.11
    command: |
      bash -c "
        echo '🔍 Running parallel lint checks...'
        # Run all lint checks in parallel with proper error handling
        (echo '  ▶ Black...' && black --check src/ tests/ scripts/) &
        (echo '  ▶ isort...' && \
          isort --check-only --profile black src/ tests/ scripts/) &
        (echo '  ▶ Flake8...' && flake8 src/ tests/ scripts/) &
        (echo '  ▶ MyPy...' && mypy src/ --config-file=mypy.ini) &
        (echo '  ▶ Context lint...' && \
          python -m src.agents.context_lint validate context/) &
        wait
        echo '🎉 All lint checks completed'
      "
    stop_signal: SIGTERM
    stop_grace_period: 30s

volumes:
  qdrant_data:
    driver: local
  neo4j_data:
    driver: local
  neo4j_logs:
    driver: local

networks:
  default:
    name: agent-context-network
