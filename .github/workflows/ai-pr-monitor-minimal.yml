name: AI-Monitored PR Process (Minimal Test)

on:
  pull_request:
    types: [opened, synchronize]

jobs:
  test-minimal:
    name: "🤖 Minimal AI Test"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: read

    steps:
      - name: Monitor ARC-Reviewer Verdict
        run: |
          echo "🔍 Checking ARC-Reviewer verdict for PR ${{ github.event.pull_request.number }}"

          # Get latest ARC-Reviewer comment
          gh api repos/${{ github.repository }}/issues/${{ github.event.pull_request.number }}/comments \
            --jq '.[] | select(.user.type == "Bot" and (.body | contains("ARC-Reviewer"))) | .body' \
            | tail -1 > arc_comment.txt

          if [ -s arc_comment.txt ]; then
            echo "📄 Found ARC-Reviewer comment:"

            # Extract verdict
            if grep -q "verdict.*APPROVE" arc_comment.txt; then
              echo "✅ ARC-Reviewer: APPROVED"
              echo "PR_VERDICT=APPROVED" >> $GITHUB_OUTPUT
            elif grep -q "verdict.*REQUEST_CHANGES" arc_comment.txt; then
              echo "❌ ARC-Reviewer: CHANGES REQUESTED"
              echo "📋 Checking for blocking issues..."
              if grep -q "blocking:" arc_comment.txt; then
                echo "🚨 Blocking issues found - PR cannot merge"
              fi
              echo "PR_VERDICT=CHANGES_REQUESTED" >> $GITHUB_OUTPUT
            else
              echo "⏳ ARC-Reviewer: Status unclear, awaiting verdict"
              echo "PR_VERDICT=PENDING" >> $GITHUB_OUTPUT
            fi
          else
            echo "⏳ No ARC-Reviewer comment found yet"
            echo "PR_VERDICT=NO_COMMENT" >> $GITHUB_OUTPUT
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
