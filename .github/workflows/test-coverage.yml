---
name: Coverage Analysis

"on":
  push:
    branches: [main, develop]
  pull_request:
    branches: [main]

jobs:
  coverage:
    runs-on: ubuntu-latest

    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements*.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt
          pip install -r requirements-test.txt
          pip install coverage-badge

      - name: Create directories
        run: |
          mkdir -p context/.duckdb
          mkdir -p context/.graph_cache
          mkdir -p context/.vector_cache
          mkdir -p context/trace
          mkdir -p context/archive
          mkdir -p context/mcp_contracts
          mkdir -p context/logs/cleanup
          mkdir -p context/logs/eval
          mkdir -p context/logs/kv
          mkdir -p context/logs/prompts
          mkdir -p context/logs/signatures

      - name: Run tests with coverage
        run: |
          python -m pytest \
            --cov=src \
            --cov-branch \
            --cov-report=term-missing:skip-covered \
            --cov-report=html \
            --cov-report=xml \
            --cov-report=json \
            -v
        env:
          REDIS_HOST: localhost
          REDIS_PORT: 6379

      - name: Check coverage thresholds
        run: |
          python scripts/coverage_summary.py

      - name: Enforce coverage thresholds
        run: |
          # Use coverage.py's built-in fail_under check with centralized threshold
          THRESHOLD=$(python scripts/get_coverage_threshold.py)
          python -m coverage report --fail-under=$THRESHOLD

      - name: Check mutation testing baseline
        run: |
          python scripts/check_mutation_baseline.py
        continue-on-error: true

      - name: Run mutation testing (sample)
        env:
          MUTMUT_PATHS: >
            src/validators/kv_validators.py
            src/storage/context_kv.py
        run: |
          # Run mutation testing using pyproject.toml configuration
          echo "Running mutation testing on configured modules"
          mutmut run --max-children 4 || true
          mutmut results || true
        continue-on-error: true

      - name: Upload coverage reports
        uses: actions/upload-artifact@v4
        with:
          name: coverage-reports
          path: |
            htmlcov/
            coverage.xml
            coverage.json
            coverage.svg

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella
          fail_ci_if_error: false

      - name: Generate coverage summary
        if: github.event_name == 'pull_request'
        run: |
          python scripts/generate_pr_coverage_summary.py > coverage_summary.md

      - name: Comment PR with coverage summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const coverageSummary = fs.readFileSync(
              'coverage_summary.md', 'utf8'
            );

            // Find existing coverage comment
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });

            const existingComment = comments.find(comment =>
              comment.body.includes('## ðŸ“Š Coverage Summary')
            );

            if (existingComment) {
              // Update existing comment
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: existingComment.id,
                body: coverageSummary
              });
            } else {
              // Create new comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: coverageSummary
              });
            }

      - name: Generate coverage badge
        run: |
          coverage-badge -o coverage.svg -f

      - name: Verify test traceability
        run: |
          python -m pytest tests/test_traceability_matrix.py -v
