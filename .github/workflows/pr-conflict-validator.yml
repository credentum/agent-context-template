---
###############################################################################
# üö® PR Conflict Validator - Prevent Conflicting PRs from Being Merged
# Runs comprehensive conflict detection before any merge attempt
###############################################################################
name: PR Conflict Validator

on:
  pull_request:
    types: [opened, synchronize, reopened]
    # Removed pull_request_target to prevent duplicate jobs

jobs:
  validate-conflicts:
    name: "üîç Conflict Detection"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    permissions:
      contents: read
      pull-requests: write
      checks: write

    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    steps:
      - name: Checkout base branch
        uses: actions/checkout@v4
        with:
          ref: ${{ github.event.pull_request.base.ref }}
          fetch-depth: 0

      - name: Fetch PR branch
        run: |
          git fetch origin ${{ github.event.pull_request.head.ref }}:pr-branch
          git fetch origin ${{ github.event.pull_request.base.ref }}:base-branch

      - name: Comprehensive conflict detection
        id: conflict-check
        run: |
          echo "üîç Running comprehensive conflict detection..."

          PR_HEAD="${{ github.event.pull_request.head.sha }}"
          BASE_HEAD="${{ github.event.pull_request.base.sha }}"
          PR_NUMBER="${{ github.event.pull_request.number }}"

          echo "PR HEAD: $PR_HEAD"
          echo "BASE HEAD: $BASE_HEAD"
          echo "PR NUMBER: $PR_NUMBER"

          # Get current merge status from GitHub API
          MERGEABLE_STATE=$(gh pr view $PR_NUMBER \
            --json mergeable,mergeStateStatus \
            --jq '{mergeable: .mergeable, state: .mergeStateStatus}')
          echo "GitHub merge status: $MERGEABLE_STATE"

          MERGEABLE=$(echo "$MERGEABLE_STATE" | jq -r '.mergeable')
          MERGE_STATE=$(echo "$MERGEABLE_STATE" | jq -r '.state')

          echo "mergeable=$MERGEABLE" >> $GITHUB_OUTPUT
          echo "merge_state_status=$MERGE_STATE" >> $GITHUB_OUTPUT

          # Test 1: GitHub's built-in mergeable check
          if [ "$MERGEABLE" = "CONFLICTING" ]; then
            echo "‚ùå GitHub reports PR has conflicts"
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            echo "conflict_type=github_api" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Test 2: Check merge state status
          if [ "$MERGE_STATE" = "DIRTY" ] || \
             [ "$MERGE_STATE" = "BLOCKED" ]; then
            echo "‚ùå Merge state is $MERGE_STATE"
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            echo "conflict_type=merge_state" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Test 3: Manual merge simulation
          echo "üß™ Simulating merge to detect conflicts..."

          git checkout base-branch
          git checkout -b merge-test

          if git merge pr-branch --no-commit --no-ff; then
            echo "‚úÖ Merge simulation successful - no conflicts detected"
            git merge --abort 2>/dev/null || true
            echo "has_conflicts=false" >> $GITHUB_OUTPUT
            echo "conflict_type=none" >> $GITHUB_OUTPUT
          else
            echo "‚ùå Merge simulation failed - conflicts detected"
            git merge --abort 2>/dev/null || true
            echo "has_conflicts=true" >> $GITHUB_OUTPUT
            echo "conflict_type=merge_simulation" >> $GITHUB_OUTPUT
          fi

          # Test 4: Check for divergent history
          COMMITS_BEHIND=$(git rev-list --count pr-branch..base-branch)
          COMMITS_AHEAD=$(git rev-list --count base-branch..pr-branch)

          echo "Commits behind base: $COMMITS_BEHIND"
          echo "Commits ahead of base: $COMMITS_AHEAD"

          echo "commits_behind=$COMMITS_BEHIND" >> $GITHUB_OUTPUT
          echo "commits_ahead=$COMMITS_AHEAD" >> $GITHUB_OUTPUT

          # If branch is significantly behind, flag for update
          if [ "$COMMITS_BEHIND" -gt 10 ]; then
            echo "‚ö†Ô∏è Branch is behind base ($COMMITS_BEHIND commits)"
            echo "needs_update=true" >> $GITHUB_OUTPUT
          else
            echo "needs_update=false" >> $GITHUB_OUTPUT
          fi

          # Exit with failure if conflicts detected
          HAS_CONFLICTS=$(cat $GITHUB_OUTPUT | \
            grep "has_conflicts=" | cut -d'=' -f2 | tail -1)
          if [ "$HAS_CONFLICTS" = "true" ]; then
            echo "‚ùå Workflow failing due to conflicts detected"
            exit 1
          fi

      - name: Comment on PR if conflicts detected
        if: steps.conflict-check.outputs.has_conflicts == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const conflictType =
              '${{ steps.conflict-check.outputs.conflict_type }}';
            const commitsBehind =
              '${{ steps.conflict-check.outputs.commits_behind }}';

            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.payload.pull_request.number,
              body: `## ‚ùå Conflicts Detected

            **Detection Method**: ${conflictType}
            **Branch Status**: ${commitsBehind} commits behind base

            ### üîß Resolution Steps:

            1. **Update your branch**:
               \`\`\`bash
               git checkout ${{ github.event.pull_request.head.ref }}
               git fetch origin
               git merge origin/${{ github.event.pull_request.base.ref }}
               # Resolve any conflicts
               git push origin ${{ github.event.pull_request.head.ref }}
               \`\`\`

            2. **Or rebase your branch**:
               \`\`\`bash
               git checkout ${{ github.event.pull_request.head.ref }}
               git fetch origin
               git rebase origin/${{ github.event.pull_request.base.ref }}
               # Resolve any conflicts
               git push origin ${{ github.event.pull_request.head.ref }} \
                 --force-with-lease
               \`\`\`

            ### üö® Auto-merge Blocked
            This PR will not be auto-merged until conflicts are resolved.

            _This is an automated message from the PR Conflict Validator._`
            });
