name: Sprint Start

on:
  workflow_dispatch:
    inputs:
      sprint_number:
        description: 'Sprint number to start'
        required: true
        type: number
  label:
    types: [created]

jobs:
  start-sprint:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    if: |
      github.event_name == 'workflow_dispatch' ||
      (github.event_name == 'label' && startsWith(github.event.label.name, 'start-sprint-'))

    permissions:
      contents: write
      issues: write
      pull-requests: write

    steps:
      - uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install click pyyaml

      - name: Determine sprint number
        id: sprint
        run: |
          if [ "${{ github.event_name }}" == "workflow_dispatch" ]; then
            SPRINT_NUMBER="${{ inputs.sprint_number }}"
          else
            # Extract number from label like "start-sprint-4"
            LABEL="${{ github.event.label.name }}"
            SPRINT_NUMBER=$(echo $LABEL | sed 's/start-sprint-//')
          fi

          # Validate sprint number is numeric and reasonable
          if ! [[ "$SPRINT_NUMBER" =~ ^[0-9]+$ ]]; then
            echo "Error: Invalid sprint number format"
            exit 1
          fi

          if [ "$SPRINT_NUMBER" -lt 1 ] || [ "$SPRINT_NUMBER" -gt 999 ]; then
            echo "Error: Sprint number must be between 1 and 999"
            exit 1
          fi

          echo "number=$SPRINT_NUMBER" >> $GITHUB_OUTPUT

      - name: Update sprint status
        id: status_update
        run: |
          SPRINT_ID="sprint-$(printf '%03d' ${{ steps.sprint.outputs.number }})"
          echo "Starting sprint: $SPRINT_ID"

          # Update sprint status to in_progress using external script
          if python scripts/update_sprint_status.py "$SPRINT_ID"; then
            echo "success=true" >> $GITHUB_OUTPUT
          else
            echo "success=false" >> $GITHUB_OUTPUT
            echo "Error: Failed to update sprint status"
            exit 1
          fi

      - name: Create sprint issues
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          SPRINT_ID="sprint-$(printf '%03d' ${{ steps.sprint.outputs.number }})"
          python -m src.agents.sprint_issue_linker create --sprint "$SPRINT_ID" --verbose

      - name: Update existing labels
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python -m src.agents.sprint_issue_linker update-labels --verbose

      - name: Commit sprint changes
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          if git diff --quiet; then
            echo "No changes to commit"
          else
            git add context/sprints/*.yaml
            git commit -m "chore: start sprint ${{ steps.sprint.outputs.number }}

            Sprint status updated to in_progress
            GitHub issues created for sprint tasks

            Co-Authored-By: github-actions[bot] <github-actions[bot]@users.noreply.github.com>"

            git push
          fi

      - name: Delete trigger label
        if: github.event_name == 'label'
        uses: actions/github-script@v7
        with:
          script: |
            await github.rest.issues.deleteLabel({
              owner: context.repo.owner,
              repo: context.repo.repo,
              name: '${{ github.event.label.name }}'
            });

      - name: Create sprint announcement
        uses: actions/github-script@v7
        with:
          script: |
            const sprintNumber = ${{ steps.sprint.outputs.number }};
            const body = `# ðŸš€ Sprint ${sprintNumber} has started!

            The sprint automation system has:
            - âœ… Updated sprint status to **in_progress**
            - âœ… Created GitHub issues for all sprint tasks
            - âœ… Applied appropriate labels

            ## Next Steps
            1. Review the created issues and assign team members
            2. Add any additional context or acceptance criteria
            3. Start working on Phase 1 tasks

            Track sprint progress with:
            \`\`\`bash
            python update_sprint.py report --verbose
            \`\`\`

            _This announcement was automatically generated by the sprint automation system._`;

            await github.rest.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: `Sprint ${sprintNumber} Kickoff`,
              body: body,
              labels: [`sprint-${sprintNumber}`, 'announcement']
            });
