---
###############################################################################
# üß† Smart Auto-Merge - Event-driven PR merging
# Triggers on specific events to check and merge approved PRs
###############################################################################
name: Smart Auto-Merge

on:
  # Trigger when CI workflows complete
  workflow_run:
    workflows: ["Claude Code Review", "CI Optimized Pipeline"]
    types: [completed]

  # Trigger when PR is updated (for restart capability)
  pull_request:
    types: [synchronize]

  # Manual trigger for testing
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'PR number to check for auto-merge'
        required: true
        type: string

jobs:
  smart-auto-merge:
    name: "üß† Smart Auto-Merge"
    runs-on: ubuntu-latest
    if: github.event.workflow_run.conclusion == 'success' || github.event_name == 'workflow_dispatch'

    permissions:
      contents: write
      pull-requests: write
      actions: read
      checks: read
      statuses: read

    steps:
      - name: Find associated PR
        id: find-pr
        uses: actions/github-script@v7
        with:
          script: |
            let prNumber = null;
            let headSha = null;

            if (context.eventName === 'workflow_dispatch') {
              // Manual trigger
              prNumber = parseInt('${{ inputs.pr_number }}');

              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber
              });

              headSha = pr.head.sha;
            } else if (context.eventName === 'pull_request') {
              // PR synchronize trigger (restart capability)
              prNumber = context.payload.pull_request.number;
              headSha = context.payload.pull_request.head.sha;

              console.log(`üîÑ PR updated: #${prNumber} - checking for auto-merge restart`);
            } else {
              // Workflow run trigger
              headSha = context.payload.workflow_run.head_sha;

              // Find PR for this commit
              const { data: prs } = await github.rest.pulls.list({
                owner: context.repo.owner,
                repo: context.repo.repo,
                state: 'open',
                sort: 'updated',
                direction: 'desc'
              });

              const pr = prs.find(pr => pr.head.sha === headSha);
              if (pr) {
                prNumber = pr.number;
              }
            }

            if (!prNumber) {
              console.log('No open PR found for this commit');
              return JSON.stringify({ found: false });
            }

            console.log(`Found PR #${prNumber} for commit ${headSha}`);

            // Get full PR details
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: prNumber
            });

            return JSON.stringify({
              found: true,
              number: prNumber,
              head_sha: headSha,
              mergeable: pr.mergeable,
              mergeable_state: pr.mergeable_state,
              draft: pr.draft,
              base_ref: pr.base.ref,
              title: pr.title,
              auto_merge: pr.auto_merge !== null
            });

      - name: Check auto-merge eligibility
        id: check-eligibility
        if: fromJson(steps.find-pr.outputs.result).found
        run: |
          PR_DATA='${{ steps.find-pr.outputs.result }}'

          # Parse PR data
          PR_NUMBER=$(echo $PR_DATA | jq -r '.number')
          IS_DRAFT=$(echo $PR_DATA | jq -r '.draft')
          IS_MERGEABLE=$(echo $PR_DATA | jq -r '.mergeable')
          BASE_REF=$(echo $PR_DATA | jq -r '.base_ref')
          TITLE=$(echo $PR_DATA | jq -r '.title')
          AUTO_MERGE_ENABLED=$(echo $PR_DATA | jq -r '.auto_merge')

          echo "pr_number=$PR_NUMBER" >> $GITHUB_OUTPUT
          echo "head_sha=$(echo $PR_DATA | jq -r '.head_sha')" >> $GITHUB_OUTPUT

          echo "üîç Checking auto-merge eligibility for PR #$PR_NUMBER"
          echo "- Title: $TITLE"
          echo "- Draft: $IS_DRAFT"
          echo "- Mergeable: $IS_MERGEABLE"
          echo "- Base: $BASE_REF"
          echo "- Auto-merge already enabled: $AUTO_MERGE_ENABLED"

          # Check if PR is eligible for auto-merge
          ELIGIBLE=true
          SKIP_REASON=""

          if [ "$IS_DRAFT" = "true" ]; then
            ELIGIBLE=false
            SKIP_REASON="PR is a draft"
          elif [ "$IS_MERGEABLE" = "false" ]; then
            ELIGIBLE=false
            SKIP_REASON="PR is not mergeable"
          elif [ "$BASE_REF" != "main" ]; then
            ELIGIBLE=false
            SKIP_REASON="PR is not targeting main branch"
          elif [ "$AUTO_MERGE_ENABLED" = "true" ]; then
            ELIGIBLE=false
            SKIP_REASON="Auto-merge is already enabled"
          fi

          echo "eligible=$ELIGIBLE" >> $GITHUB_OUTPUT
          echo "skip_reason=$SKIP_REASON" >> $GITHUB_OUTPUT

          if [ "$ELIGIBLE" = "true" ]; then
            echo "‚úÖ PR is eligible for auto-merge evaluation"
          else
            echo "‚è≠Ô∏è Skipping: $SKIP_REASON"
          fi

      - name: Auto-update branch to prevent conflicts
        id: auto-update
        if: steps.check-eligibility.outputs.eligible == 'true'
        run: |
          echo "üîÑ Checking if branch needs updating..."

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get current branch info
          HEAD_SHA="${{ steps.check-eligibility.outputs.head_sha }}"
          BASE_REF="main"  # Smart auto-merge typically targets main
          PR_NUMBER="${{ steps.check-eligibility.outputs.pr_number }}"

          echo "HEAD_SHA: $HEAD_SHA"
          echo "BASE_REF: $BASE_REF"

          # Fetch latest changes
          git fetch origin $BASE_REF

          # Check if branch is behind base
          if ! git merge-base --is-ancestor origin/$BASE_REF $HEAD_SHA; then
            echo "‚ö†Ô∏è Branch is behind $BASE_REF, attempting auto-update..."

            # Switch to PR branch
            git checkout $HEAD_SHA

            # Check if clean rebase is possible
            if git rebase origin/$BASE_REF --dry-run 2>/dev/null; then
              echo "‚úÖ Clean rebase possible, updating branch..."

              # Perform the rebase
              git rebase origin/$BASE_REF

              # Get PR head ref name
              PR_HEAD_REF=$(gh pr view $PR_NUMBER --json headRefName --jq '.headRefName')

              # Push the updated branch
              git push origin HEAD:refs/heads/$PR_HEAD_REF --force-with-lease

              echo "‚úÖ Branch successfully updated"
              echo "branch_updated=true" >> $GITHUB_OUTPUT
              echo "conflicts_detected=false" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Conflicts detected, cannot auto-update"
              echo "Manual intervention required for conflict resolution"
              echo "branch_updated=false" >> $GITHUB_OUTPUT
              echo "conflicts_detected=true" >> $GITHUB_OUTPUT
            fi
          else
            echo "‚úÖ Branch is up to date"
            echo "branch_updated=false" >> $GITHUB_OUTPUT
            echo "conflicts_detected=false" >> $GITHUB_OUTPUT
          fi
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check all required status checks
        id: check-status
        if: steps.check-eligibility.outputs.eligible == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const headSha = '${{ steps.check-eligibility.outputs.head_sha }}';

            // Required checks for auto-merge
            const requiredChecks = [
              'claude-pr-review',
              'ARC-Reviewer',
              'üìä Coverage Analysis',
              'üîç Lint & Style',
              'üß™ Core Tests',
              'üîó Integration Tests'
            ];

            console.log(`Checking status for commit: ${headSha}`);

            // Get all checks for this commit
            const { data: checkRuns } = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: headSha,
              per_page: 100
            });

            const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: headSha
            });

            console.log(`Found ${checkRuns.check_runs.length} check runs and ${statusChecks.statuses.length} status checks`);

            // Combine all checks
            const allChecks = [
              ...checkRuns.check_runs.map(run => ({
                name: run.name,
                status: run.status,
                conclusion: run.conclusion
              })),
              ...statusChecks.statuses.map(status => ({
                name: status.context,
                status: status.state === 'pending' ? 'in_progress' : 'completed',
                conclusion: status.state
              }))
            ];

            // Check each required check
            const checkResults = {};
            let allPassed = true;

            for (const requiredCheck of requiredChecks) {
              const check = allChecks.find(c =>
                c.name === requiredCheck ||
                c.name.includes(requiredCheck) ||
                requiredCheck.includes(c.name)
              );

              if (!check) {
                console.log(`‚ùå Missing required check: ${requiredCheck}`);
                checkResults[requiredCheck] = 'missing';
                allPassed = false;
              } else if (check.status !== 'completed') {
                console.log(`‚è≥ ${requiredCheck} is still ${check.status}`);
                checkResults[requiredCheck] = 'pending';
                allPassed = false;
              } else if (check.conclusion !== 'success' && check.conclusion !== 'SUCCESS') {
                console.log(`‚ùå ${requiredCheck} failed: ${check.conclusion}`);
                checkResults[requiredCheck] = 'failed';
                allPassed = false;
              } else {
                console.log(`‚úÖ ${requiredCheck} passed`);
                checkResults[requiredCheck] = 'success';
              }
            }

            console.log(`All required checks passed: ${allPassed}`);
            return allPassed ? 'passed' : 'failed';

      - name: Check ARC-Reviewer approval
        id: check-arc-approval
        if: steps.check-status.outputs.result == 'passed'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.check-eligibility.outputs.pr_number }};

            // Get comments from the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: prNumber,
              per_page: 100
            });

            // Find the most recent ARC-Reviewer comment
            const arcComments = comments.filter(comment =>
              comment.user.type === 'Bot' &&
              (comment.body.includes('ARC-Reviewer') || comment.body.includes('schema_version'))
            );

            if (arcComments.length === 0) {
              console.log('‚ùå No ARC-Reviewer comment found');
              return 'no-review';
            }

            // Get the most recent ARC-Reviewer comment
            const latestComment = arcComments[arcComments.length - 1];
            const reviewBody = latestComment.body;

            console.log(`Found ARC-Reviewer comment from ${latestComment.created_at}`);

            // Parse YAML content from the review
            const yamlMatch = reviewBody.match(/```yaml\s*([\s\S]*?)```/) ||
                            reviewBody.match(/schema_version:\s*"1\.0"[\s\S]*?automated_issues:/);

            if (!yamlMatch) {
              console.log('‚ùå No YAML content found in ARC-Reviewer comment');
              return 'no-yaml';
            }

            try {
              // Simple YAML parsing for key fields (avoiding full YAML parser dependency)
              const yamlContent = yamlMatch[1] || yamlMatch[0];

              // Extract verdict
              const verdictMatch = yamlContent.match(/verdict:\s*"?(APPROVE|REQUEST_CHANGES)"?/);
              if (!verdictMatch) {
                console.log('‚ùì No verdict found in YAML');
                return 'unclear';
              }

              const verdict = verdictMatch[1];
              console.log(`ARC-Reviewer verdict: ${verdict}`);

              if (verdict === 'APPROVE') {
                // Check for blocking issues in YAML (nested under issues:)
                const blockingMatch = yamlContent.match(/issues:\s*\n\s*blocking:\s*\[\s*\]/) ||
                                    yamlContent.match(/blocking:\s*\[\s*\]/) ||
                                    yamlContent.match(/blocking:\s*$/m);

                if (blockingMatch) {
                  console.log('‚úÖ No blocking issues found');
                  return 'approved';
                } else {
                  // Check if blocking section has content
                  const hasBlockingContent = yamlContent.match(/blocking:\s*\n\s*- /);
                  if (hasBlockingContent) {
                    console.log('‚ùå Found blocking issues in YAML');
                    return 'blocking-issues';
                  } else {
                    console.log('‚úÖ No blocking issues found');
                    return 'approved';
                  }
                }
              } else if (verdict === 'REQUEST_CHANGES') {
                console.log('‚ùå ARC-Reviewer verdict: REQUEST_CHANGES');
                return 'changes-requested';
              } else {
                console.log('‚ùì Unknown verdict in YAML');
                return 'unclear';
              }
            } catch (error) {
              console.log(`‚ùå Error parsing YAML: ${error.message}`);
              return 'parse-error';
            }

      - name: Enable auto-merge
        id: enable-auto-merge
        if: steps.check-arc-approval.outputs.result == 'approved' && steps.auto-update.outputs.conflicts_detected != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const prNumber = ${{ steps.check-eligibility.outputs.pr_number }};

            try {
              // Enable auto-merge with squash
              await github.rest.pulls.enableAutoMerge({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: prNumber,
                merge_method: 'squash'
              });

              console.log('‚úÖ Auto-merge enabled successfully');

              // Add success comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `üöÄ **Auto-merge enabled!**

                All conditions have been met:
                - ‚úÖ All required CI checks passed
                - ‚úÖ ARC-Reviewer approved with no blocking issues
                - ‚úÖ PR is mergeable

                The PR will be automatically merged when all branch protection requirements are satisfied.

                **Triggered by:** ${context.eventName === 'workflow_dispatch' ? 'Manual trigger' : 'Workflow completion'}
                **Commit:** ${steps.check-eligibility.outputs.head_sha}

                ---
                *ü§ñ Automated by Smart Auto-Merge workflow*`
              });

              return 'success';
            } catch (error) {
              console.error('‚ùå Failed to enable auto-merge:', error.message);

              // Add failure comment
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: prNumber,
                body: `‚ùå **Auto-merge failed**

                Failed to enable auto-merge: ${error.message}

                This may be due to:
                - Branch protection rules not allowing auto-merge
                - Insufficient permissions
                - PR conflicts or other issues

                Please check the workflow logs for details.

                ---
                *ü§ñ Automated by Smart Auto-Merge workflow*`
              });

              return 'failed';
            }

      - name: Report why auto-merge was skipped
        if: >
          steps.check-eligibility.outputs.eligible != 'true' ||
          steps.check-status.outputs.result != 'passed' ||
          steps.check-arc-approval.outputs.result != 'approved' ||
          steps.auto-update.outputs.conflicts_detected == 'true'
        run: |
          echo "üîç Auto-merge evaluation results:"
          echo "- PR found: ${{ fromJson(steps.find-pr.outputs.result).found }}"
          echo "- Eligible: ${{ steps.check-eligibility.outputs.eligible }}"
          echo "- Skip reason: ${{ steps.check-eligibility.outputs.skip_reason }}"
          echo "- CI status: ${{ steps.check-status.outputs.result }}"
          echo "- ARC approval: ${{ steps.check-arc-approval.outputs.result }}"
          echo "- Branch updated: ${{ steps.auto-update.outputs.branch_updated }}"
          echo "- Conflicts detected: ${{ steps.auto-update.outputs.conflicts_detected }}"
          echo "- Auto-merge result: ${{ steps.enable-auto-merge.outputs.result }}"

          if [ "${{ steps.auto-update.outputs.conflicts_detected }}" = "true" ]; then
            echo "üîÑ Auto-merge blocked: Conflicts detected during auto-update"
            echo "Manual intervention required to resolve conflicts"
          elif [ "${{ steps.check-eligibility.outputs.eligible }}" = "true" ] && \
               [ "${{ steps.check-status.outputs.result }}" != "passed" ]; then
            echo "‚è≥ Waiting for CI checks to complete..."
          elif [ "${{ steps.check-eligibility.outputs.eligible }}" = "true" ] && \
               [ "${{ steps.check-arc-approval.outputs.result }}" != "approved" ]; then
            echo "‚è≥ Waiting for ARC-Reviewer approval..."
          fi

      - name: Workflow summary
        if: always()
        run: |
          echo "üìä Smart Auto-Merge Summary:"
          echo "================================"
          echo "Event: ${{ github.event_name }}"
          echo "PR: #${{ steps.check-eligibility.outputs.pr_number }}"
          echo "Commit: ${{ steps.check-eligibility.outputs.head_sha }}"
          echo "Eligible: ${{ steps.check-eligibility.outputs.eligible }}"
          echo "CI Status: ${{ steps.check-status.outputs.result }}"
          echo "ARC Approval: ${{ steps.check-arc-approval.outputs.result }}"
          echo "Auto-merge: ${{ steps.enable-auto-merge.outputs.result }}"
          echo "================================"
