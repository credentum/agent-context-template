name: PR Validation

on:
  pull_request:
    types: [opened, edited, synchronize]

jobs:
  validate-pr:
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      pull-requests: write
      contents: read

    steps:
    - name: Validate PR Description
      uses: actions/github-script@v7
      with:
        script: |
          const pr = context.payload.pull_request;
          const prBody = pr.body || '';
          const prTitle = pr.title || '';

          // Check for closing keywords
          const closingKeywords = /(closes?|fixes?|resolves?|implements?)\s+#(\d+)/gi;
          const noIssueChecked = /- \[x\] This PR doesn't close any existing issues/i;

          const combinedText = prBody + ' ' + prTitle;
          const hasClosingKeywords = closingKeywords.test(combinedText);
          const hasNoIssueChecked = noIssueChecked.test(prBody);

          let feedback = [];
          let isValid = true;

          if (!hasClosingKeywords && !hasNoIssueChecked) {
            isValid = false;
            feedback.push('❌ **Missing Issue References**: Please either:');
            feedback.push('   - Add closing keywords (e.g., "Closes #123", "Fixes #456")');
            feedback.push('   - Check the "This PR doesn\'t close any existing issues" box');
          }

          if (hasClosingKeywords) {
            // Extract issue numbers to validate they exist
            const matches = [...combinedText.matchAll(closingKeywords)];
            const issueNumbers = matches.map(match => match[2]);

            let validIssues = [];
            let invalidIssues = [];

            for (const issueNum of issueNumbers) {
              try {
                await github.rest.issues.get({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: parseInt(issueNum)
                });
                validIssues.push(issueNum);
              } catch (error) {
                invalidIssues.push(issueNum);
              }
            }

            if (invalidIssues.length > 0) {
              isValid = false;
              feedback.push(`❌ **Invalid Issue References**: Issues #${invalidIssues.join(', #')} do not exist`);
            }

            if (validIssues.length > 0) {
              feedback.push(`✅ **Valid Issue References**: Will close issues #${validIssues.join(', #')} when merged`);
            }
          }

          // Check for proper PR structure
          if (!prBody.includes('## Summary')) {
            feedback.push('⚠️ **Missing Summary**: Please add a summary section describing your changes');
          }

          if (!prBody.includes('## Type of Change')) {
            feedback.push('⚠️ **Missing Type**: Please select the type of change from the checklist');
          }

          // Create or update comment
          const commentBody = `## 🤖 PR Validation Results\n\n${feedback.join('\n')}\n\n${isValid ? '✅ **All validations passed!** This PR is ready for review.' : '❌ **Please address the issues above** before this PR can be merged.'}\n\n---\n*This comment is automatically updated when the PR description changes.*`;

          // Find existing bot comment
          const comments = await github.rest.issues.listComments({
            owner: context.repo.owner,
            repo: context.repo.repo,
            issue_number: pr.number
          });

          const botComment = comments.data.find(comment =>
            comment.user.type === 'Bot' &&
            comment.body.includes('PR Validation Results')
          );

          if (botComment) {
            await github.rest.issues.updateComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: botComment.id,
              body: commentBody
            });
          } else {
            await github.rest.issues.createComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr.number,
              body: commentBody
            });
          }

          // Set check status
          if (!isValid) {
            core.setFailed('PR validation failed. Please check the validation comment on the PR.');
          }
