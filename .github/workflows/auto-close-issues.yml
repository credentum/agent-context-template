name: Auto-Close Issues on PR Merge

on:
  pull_request:
    types: [closed]

jobs:
  auto-close-issues:
    if: github.event.pull_request.merged == true
    runs-on: ubuntu-latest
    timeout-minutes: 5

    permissions:
      contents: read
      issues: write
      pull-requests: read

    steps:
    - name: Auto-close issues with comprehensive keyword detection
      uses: actions/github-script@v7
      with:
        script: |
          const { owner, repo } = context.repo;
          const prNumber = context.payload.pull_request.number;
          const prBody = context.payload.pull_request.body || '';
          const prTitle = context.payload.pull_request.title || '';

          // Enhanced regex for closing keywords (case-insensitive)
          const closingKeywords = [
            'closes?', 'close', 'closed', 'closing',
            'fixes?', 'fix', 'fixed', 'fixing',
            'resolves?', 'resolve', 'resolved', 'resolving',
            'implements?', 'implement', 'implemented', 'implementing',
            'addresses?', 'address', 'addressed', 'addressing',
            'completes?', 'complete', 'completed', 'completing'
          ];

          // Create comprehensive regex pattern
          const keywordPattern = `(${closingKeywords.join('|')})`;
          const issuePattern = `${keywordPattern}\\s+#(\\d+)`;
          const globalRegex = new RegExp(issuePattern, 'gi');

          // Check PR body and title
          const combinedText = `${prBody} ${prTitle}`;
          const matches = [...combinedText.matchAll(globalRegex)];

          // Also check commit messages
          const { data: commits } = await github.rest.pulls.listCommits({
            owner,
            repo,
            pull_number: prNumber
          });

          const commitMessages = commits.map(commit => commit.commit.message).join(' ');
          const commitMatches = [...commitMessages.matchAll(globalRegex)];

          // Combine all matches
          const allMatches = [...matches, ...commitMatches];
          const issueNumbers = [...new Set(allMatches.map(match => parseInt(match[2])))];

          console.log(`Found ${issueNumbers.length} issues to close: ${issueNumbers.join(', ')}`);

          // Close each issue
          for (const issueNumber of issueNumbers) {
            try {
              // Check if issue exists and is open
              const { data: issue } = await github.rest.issues.get({
                owner,
                repo,
                issue_number: issueNumber
              });

              if (issue.state === 'open') {
                await github.rest.issues.update({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  state: 'closed'
                });

                // Add closing comment
                await github.rest.issues.createComment({
                  owner,
                  repo,
                  issue_number: issueNumber,
                  body: `üéâ Automatically closed by merged PR #${prNumber}\n\n**Auto-Close Detection:**\n- Detected closing keywords in PR content\n- Issue closure automated via GitHub Actions`
                });

                console.log(`‚úÖ Closed issue #${issueNumber}`);
              } else {
                console.log(`‚ÑπÔ∏è  Issue #${issueNumber} is already closed`);
              }
            } catch (error) {
              if (error.status === 404) {
                console.log(`‚ö†Ô∏è  Issue #${issueNumber} not found, skipping`);
              } else {
                console.error(`‚ùå Error closing issue #${issueNumber}:`, error.message);
              }
            }
          }

          // Set output for other workflows
          return {
            issuesClosed: issueNumbers.length,
            closedIssues: issueNumbers
          };
