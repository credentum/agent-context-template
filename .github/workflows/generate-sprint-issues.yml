---
name: Generate Sprint Issues

# Security improvements:
# - Triggers only on merged PRs (not direct pushes) to ensure code review
# - Uses minimal permissions (principle of least privilege)
# - References PR commit SHAs for security traceability

'on':
  # Manual trigger for specific sprints
  workflow_dispatch:
    inputs:
      sprint_id:
        description: 'Sprint ID (e.g., sprint-5.1)'
        required: true
        type: string
      dry_run:
        description: 'Dry run (preview only)'
        required: false
        type: boolean
        default: false

  # Automatic trigger when sprint files are modified via PR merge
  # Only triggers on successful PR merge to main, ensuring security review
  pull_request:
    types: [closed]
    paths:
      - 'context/sprints/sprint-*.yaml'
    branches:
      - main

jobs:
  generate:
    runs-on: ubuntu-latest
    # Minimal required permissions (principle of least privilege)
    permissions:
      contents: read        # Required for checkout only
      issues: write         # Required for creating GitHub issues
      pull-requests: write  # Required for creating PRs with sprint updates

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history to detect changes reliably

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: pip install click pyyaml

      - name: Generate issues (Manual)
        if: github.event_name == 'workflow_dispatch'
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          if [ "${{ github.event.inputs.dry_run }}" = "true" ]; then
            python -m src.agents.sprint_issue_linker create \
              --sprint ${{ github.event.inputs.sprint_id }} \
              --dry-run --verbose
          else
            python -m src.agents.sprint_issue_linker create \
              --sprint ${{ github.event.inputs.sprint_id }} --verbose
          fi

      - name: Generate issues (Auto)
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.merged == true
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "Checking for modified sprint files..."

          # Check for modified sprint files in the merged PR
          # Using a more robust approach to detect changes

          # Get the merge commit and its parent for comparison
          merge_commit=$(git rev-parse HEAD)
          parent_commit=$(git rev-parse HEAD~1)

          echo "Comparing commits: $parent_commit...$merge_commit"

          # Check if git diff command will work
          if ! git diff --name-only "$parent_commit" "$merge_commit" >/dev/null 2>&1; then
            echo "Warning: Unable to perform git diff, checking all sprint files"
            # Fallback: check all sprint files
            find context/sprints -name "sprint-*.yaml" | while read file; do
              if [ -f "$file" ]; then
                sprint_id=$(basename "$file" .yaml)
                echo "Checking sprint file: $sprint_id"

                # Process the file (same logic as below)
                status=$(python -c \
                  "import yaml; f=open('$file'); data=yaml.safe_load(f); \
                  f.close(); print(data.get('status', 'unknown'))")

                if [ "$status" = "planning" ] || \
                   [ "$status" = "in_progress" ]; then
                  echo "Auto-generating issues for $sprint_id (status: $status)"
                  python -m src.agents.sprint_issue_linker create \
                    --sprint "$sprint_id" --verbose
                else
                  echo "Skipping $sprint_id (status: $status)"
                fi
              fi
            done
          else
            # Normal path: check only modified files
            git diff --name-only "$parent_commit" "$merge_commit" | \
              grep 'context/sprints/sprint-.*\.yaml' | while read file; do
              if [ -f "$file" ]; then
                sprint_id=$(basename "$file" .yaml)
                echo "Checking sprint file: $sprint_id"

                # Only generate if sprint is in planning or in_progress
                status=$(python -c \
                  "import yaml; f=open('$file'); data=yaml.safe_load(f); \
                  f.close(); print(data.get('status', 'unknown'))")

                if [ "$status" = "planning" ] || \
                   [ "$status" = "in_progress" ]; then
                  echo "Auto-generating issues for $sprint_id (status: $status)"
                  python -m src.agents.sprint_issue_linker create \
                    --sprint "$sprint_id" --verbose
                else
                  echo "Skipping $sprint_id (status: $status)"
                fi
              fi
            done
          fi

      - name: Log completion
        if: |
          github.event_name == 'pull_request' &&
          github.event.pull_request.merged == true
        run: |
          echo "Sprint issue generation complete"
          echo "Note: Sprint file updates with issue numbers will be \
            handled manually or through separate PRs"
