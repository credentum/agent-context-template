---
###############################################################################
# 🤖 AI-Monitored PR Process - Enhanced Intelligent PR Lifecycle Management
#
# ⭐ PHASE 3 IMPLEMENTATION - FULL AUTO-MERGE CAPABILITIES ⭐
#
# Replaces 2,063 lines of brittle multi-workflow coordination with single AI agent:
#
# REPLACED WORKFLOWS:
# • auto-merge.yml (738 lines) - Complex multi-stage coordination with polling
# • smart-auto-merge.yml (524 lines) - Duplicate event-driven PR merging
# • auto-merge-notifier.yml (335 lines) - Blocking issue detection & notification
# • arc-follow-up-processor.yml (375 lines) - Complex ARC-Reviewer parsing
# • auto-merge-completion-notifier.yml (91 lines) - Success notifications
#
# ENHANCED CAPABILITIES:
# ✅ Real-time CI monitoring (replaces 30-minute polling)
# ✅ Comprehensive auto-merge condition analysis
# ✅ Intelligent conflict resolution with auto-branch updating
# ✅ Advanced ARC-Reviewer integration with blocking issue detection
# ✅ Multi-method auto-merge detection (YAML, text, labels)
# ✅ Context-aware decision making vs rigid rule-based automation
# ✅ Unified error handling and transparent communication
# ✅ Fail-safe operation with intelligent fallbacks
#
# Issue #173: Replace brittle multi-workflow automation with AI-monitored PR process
###############################################################################
name: AI-Monitored PR Process

on:
  # PR lifecycle events
  pull_request:
    types: [opened, synchronize, reopened, closed]

  # Review events
  pull_request_review:
    types: [submitted]
  pull_request_review_comment:
    types: [created]

  # CI completion events
  check_suite:
    types: [completed]
  status: {}

  # Issue comments for manual triggering
  issue_comment:
    types: [created]

jobs:
  ai-monitor:
    name: "🤖 AI PR Monitor"
    runs-on: ubuntu-latest

    # Temporarily disabled to unblock PR merging - AI action causing startup failures
    if: false

    permissions:
      contents: write       # Allow Claude to commit changes and update branches
      pull-requests: write  # Allow Claude to update PRs and enable auto-merge
      issues: write        # Allow Claude to update issues
      workflows: write     # Allow Claude to modify workflow files if needed
      checks: read         # Allow Claude to read CI results
      statuses: read       # Allow Claude to read status checks
      actions: read        # Allow Claude to read workflow runs
      id-token: write      # Required for GitHub CLI authentication

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Need full history for conflict detection

      - name: Enhanced PR Context & CI Status
        id: pr-context
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            let pr_number, pr_data;

            // Get PR number from various event types
            if (context.payload.pull_request) {
              pr_number = context.payload.pull_request.number;
            } else if (context.issue && context.issue.pull_request) {
              pr_number = context.issue.number;
            } else {
              console.log('No PR found in event context');
              return JSON.stringify({});
            }

            try {
              // Get detailed PR information
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });

              // Get CI status checks (replaces complex polling logic)
              const requiredChecks = [
                'claude-pr-review',
                'ARC-Reviewer',
                'coverage',
                'lint',
                'test',
                'validate-issue-links'
              ];

              // Check runs (GitHub Checks API)
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha,
                per_page: 100
              });

              // Status checks (GitHub Status API)
              const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: pr.head.sha
              });

              // Process check results
              const checkResults = {};
              const allChecks = [];

              // Process check runs
              for (const check of checkRuns.check_runs) {
                checkResults[check.name] = {
                  type: 'check_run',
                  status: check.status,
                  conclusion: check.conclusion,
                  url: check.html_url
                };
                allChecks.push(check.name);
              }

              // Process status checks
              for (const status of statusChecks.statuses) {
                if (!checkResults[status.context]) {
                  checkResults[status.context] = {
                    type: 'status',
                    status: status.state === 'pending' ? 'in_progress' : 'completed',
                    conclusion: status.state,
                    url: status.target_url
                  };
                  allChecks.push(status.context);
                }
              }

              // Determine CI readiness
              let ciReady = true;
              const missingChecks = [];
              const failedChecks = [];

              for (const requiredCheck of requiredChecks) {
                if (!checkResults[requiredCheck]) {
                  missingChecks.push(requiredCheck);
                  ciReady = false;
                } else {
                  const check = checkResults[requiredCheck];
                  if (check.status !== 'completed') {
                    ciReady = false;
                  } else if (!['success', 'SUCCESS', 'skipped'].includes(check.conclusion)) {
                    failedChecks.push(requiredCheck);
                    ciReady = false;
                  }
                }
              }

              // Extract auto-merge flag from PR body (replaces complex YAML parsing)
              let autoMergeRequested = false;
              let autoMergeMethod = 'none';

              if (pr.body) {
                // Check for YAML frontmatter (most reliable)
                const yamlMatch = pr.body.match(/^---\s*\n([\s\S]*?)\n---/);
                if (yamlMatch) {
                  try {
                    // Simple auto-merge detection in YAML
                    const yamlContent = yamlMatch[1];
                    if (yamlContent.includes('auto_merge: true') ||
                        yamlContent.includes('auto_merge:true') ||
                        yamlContent.includes('auto-merge: true')) {
                      autoMergeRequested = true;
                      autoMergeMethod = 'yaml_metadata';
                    }
                  } catch (e) {
                    console.log('YAML parsing failed, trying text search');
                  }
                }

                // Fallback: text search for auto-merge requests
                if (!autoMergeRequested) {
                  const autoMergeInBody = pr.body.match(/auto[_-]?merge/i);
                  if (autoMergeInBody) {
                    autoMergeRequested = true;
                    autoMergeMethod = 'text_search';
                  }
                }
              }

              // Check for auto-merge label
              if (!autoMergeRequested) {
                const labels = pr.labels || [];
                for (const label of labels) {
                  if (label.name === 'auto-merge') {
                    autoMergeRequested = true;
                    autoMergeMethod = 'label';
                    break;
                  }
                }
              }

              // Get latest ARC-Reviewer comment (replaces complex YAML parsing)
              let arcReviewerStatus = null;
              try {
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number,
                  per_page: 100
                });

                // Find most recent ARC-Reviewer comment
                for (let i = comments.length - 1; i >= 0; i--) {
                  const comment = comments[i];
                  if (comment.user.type === 'Bot' || comment.user.login.includes('claude')) {
                    const yamlMatch = comment.body.match(/```(?:yaml)?\s*\n([\s\S]*?)\n```/);
                    if (yamlMatch) {
                      const yamlContent = yamlMatch[1];
                      const verdictMatch = yamlContent.match(/verdict:\s*"?(APPROVE|REQUEST_CHANGES)"?/);

                      if (verdictMatch) {
                        arcReviewerStatus = {
                          verdict: verdictMatch[1],
                          comment_id: comment.id,
                          created_at: comment.created_at
                        };

                        // Check for blocking issues - improved detection
                        const emptyBlockingMatch = yamlContent.match(/blocking:\s*\[\s*\]/) ||
                                                 yamlContent.match(/blocking:\s*$/m);
                        const hasBlockingContent = yamlContent.match(/blocking:\s*\n\s*-/) ||
                                                 yamlContent.match(/blocking:\s*\[\s*\{/) ||
                                                 yamlContent.match(/blocking:\s*\n\s*-\s*description:/);

                        arcReviewerStatus.has_blocking_issues = !emptyBlockingMatch && hasBlockingContent;
                        break;
                      }
                    }
                  }
                }
              } catch (e) {
                console.log('Error fetching ARC-Reviewer status:', e.message);
              }

              pr_data = {
                // Basic PR info
                number: pr.number,
                title: pr.title,
                body: pr.body || '',
                head_sha: pr.head.sha,
                head_ref: pr.head.ref,
                base_ref: pr.base.ref,
                mergeable: pr.mergeable,
                mergeable_state: pr.mergeable_state,
                state: pr.state,
                draft: pr.draft,
                auto_merge: pr.auto_merge,
                user: pr.user.login,
                created_at: pr.created_at,
                updated_at: pr.updated_at,

                // Enhanced auto-merge context
                auto_merge_requested: autoMergeRequested,
                auto_merge_method: autoMergeMethod,

                // CI status context
                ci_ready: ciReady,
                required_checks: requiredChecks,
                check_results: checkResults,
                missing_checks: missingChecks,
                failed_checks: failedChecks,
                all_checks: allChecks,

                // ARC-Reviewer context
                arc_reviewer_status: arcReviewerStatus,

                // Auto-merge readiness summary
                ready_for_auto_merge: (
                  !pr.draft &&
                  pr.mergeable === true &&
                  ['clean', 'unstable'].includes(pr.mergeable_state) &&
                  autoMergeRequested &&
                  ciReady &&
                  arcReviewerStatus?.verdict === 'APPROVE' &&
                  !arcReviewerStatus?.has_blocking_issues
                )
              };

              console.log(`Enhanced PR context for #${pr_number}: ${pr.title}`);
              console.log(`- Auto-merge requested: ${autoMergeRequested} (${autoMergeMethod})`);
              console.log(`- CI ready: ${ciReady} (${missingChecks.length} missing, ${failedChecks.length} failed)`);
              console.log(`- ARC-Reviewer: ${arcReviewerStatus?.verdict || 'pending'}`);
              console.log(`- Ready for auto-merge: ${pr_data.ready_for_auto_merge}`);

              return JSON.stringify(pr_data);

            } catch (error) {
              console.log(`Error fetching enhanced PR context: ${error.message}`);
              return JSON.stringify({error: error.message});
            }

      - name: AI PR Analysis & Action
        id: ai-action
        # Temporarily skip AI action to unblock PR merging
        if: false
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          auto_commit: true

          # Enhanced permissions for full PR lifecycle management
          additional_permissions: |
            actions: read
            workflows: write
            contents: write
            pull-requests: write
            checks: read
            statuses: read

          # Model configuration - use Claude Sonnet 4 for faster response
          model: "claude-sonnet-4-20250514"

          # Enhanced custom instructions with comprehensive auto-merge logic
          custom_instructions: |
            You are an AI-powered PR lifecycle manager replacing 2,063 lines of brittle multi-workflow coordination.
            Your role is to intelligently handle the complete PR process from opening to merge.

            ## Current Event & PR Context
            **Event Type**: ${{ github.event_name }}
            **Enhanced PR Data**: ${{ steps.pr-context.outputs.result }}

            The PR data includes comprehensive context: CI status, auto-merge flags,
            ARC-Reviewer status, and readiness summary.

            ## Core Responsibilities

            ### 1. **Auto-Merge Management** (Replaces auto-merge.yml + smart-auto-merge.yml)
            You have access to complete auto-merge readiness analysis.
            When `ready_for_auto_merge: true`, enable auto-merge immediately using:

            ```bash
            # Enable auto-merge using GitHub CLI
            gh pr merge [PR_NUMBER] --auto --squash
            ```

            **Auto-merge conditions (already analyzed for you)**:
            - ✅ Not draft: `!draft`
            - ✅ Mergeable: `mergeable === true`
            - ✅ No conflicts: `mergeable_state` is 'clean' or 'unstable'
            - ✅ Requested: `auto_merge_requested` via YAML, text, or label
            - ✅ CI ready: `ci_ready` (all required checks passed)
            - ✅ Approved: `arc_reviewer_status.verdict === 'APPROVE'`
            - ✅ No blocking issues: `!arc_reviewer_status.has_blocking_issues`

            ### 2. **CI Monitoring** (Replaces 30-minute polling with real-time response)
            Monitor these required checks (pre-analyzed in context):
            - `claude-pr-review`, `ARC-Reviewer`, `📊 Coverage Analysis`, `🔍 Lint & Style`, `🧪 Core Tests`, `🔗 Integration Tests`

            **Check the provided data**:
            - `missing_checks[]`: Checks not yet started
            - `failed_checks[]`: Checks that failed and need attention
            - `ci_ready`: Overall CI readiness status

            ### 3. **ARC-Reviewer Integration** (Replaces arc-follow-up-processor.yml)
            The `arc_reviewer_status` provides:
            - `verdict`: 'APPROVE' or 'REQUEST_CHANGES'
            - `has_blocking_issues`: Whether there are unresolved blocking issues
            - `comment_id`: Latest ARC-Reviewer comment for reference

            When ARC-Reviewer requests changes with blocking issues, analyze the comment and either:
            - Fix the issues directly if they're code-related
            - Request human intervention for complex issues
            - Update the PR with fixes and wait for re-review

            ### 4. **Conflict Resolution & Branch Management**
            When `mergeable_state` indicates conflicts:

            ```bash
            # Check current status
            git fetch origin ${{ github.event.pull_request.base.ref }}
            git status

            # Try automatic resolution
            git checkout ${{ github.event.pull_request.head.ref }}

            # Attempt merge (safer for automation)
            if git merge origin/${{ github.event.pull_request.base.ref }} --no-edit; then
              git push origin ${{ github.event.pull_request.head.ref }}
              echo "✅ Branch updated via merge"
            else
              # Try rebase as fallback
              git reset --hard HEAD~1
              if git rebase origin/${{ github.event.pull_request.base.ref }}; then
                git push origin ${{ github.event.pull_request.head.ref }} --force-with-lease
                echo "✅ Branch updated via rebase"
              else
                echo "❌ Manual conflict resolution required"
                # Create detailed comment about conflicts
              fi
            fi
            ```

            ### 5. **Event-Driven Actions**

            #### **On PR opened/synchronized**:
            1. Analyze auto-merge request (`auto_merge_requested`, `auto_merge_method`)
            2. Check CI status and provide feedback on missing/failed checks
            3. If ready for auto-merge: enable immediately
            4. If conflicts detected: attempt auto-resolution
            5. Comment with current status and next steps

            #### **On review submitted**:
            1. If ARC-Reviewer APPROVE + no blocking issues + CI ready: enable auto-merge
            2. If changes requested: analyze feedback and fix if possible
            3. Update PR status comment with current readiness

            #### **On CI completion** (check_suite/status events):
            1. Check if this completes all required checks (`ci_ready`)
            2. If CI failed: analyze failures and provide fixes or guidance
            3. If CI passed + all other conditions met: enable auto-merge
            4. Update status comment

            #### **On issue comment**:
            1. Handle restart requests: `/restart-auto-merge`, `/retry-merge`
            2. Process @claude mentions for manual intervention
            3. Re-evaluate auto-merge readiness if requested

            ### 6. **GraphQL Auto-Merge Enablement**
            When ready to enable auto-merge, use the GitHub CLI which handles the GraphQL complexity:

            ```bash
            # Primary method (recommended)
            gh pr merge ${{ github.event.pull_request.number }} --auto --squash --repo ${{ github.repository }}

            # Alternative: Use gh pr edit for just enabling auto-merge
            gh pr edit ${{ github.event.pull_request.number }} --add-auto-merge --repo ${{ github.repository }}
            ```

            ### 7. **Safety Mechanisms & Error Handling**
            - **Never force-merge** without proper validation
            - **Always check branch protection rules** before attempting merge
            - **Graceful error handling** with detailed status comments
            - **Comprehensive logging** of all decisions and actions
            - **Fallback to manual process** when automation cannot safely proceed

            ### 8. **Communication Protocol**
            Always start responses with:
            ```
            ## 🤖 AI PR Monitor Status
            **Event**: [event_name]
            **PR**: #[number] - [title]
            **Auto-merge requested**: [yes/no] via [method]
            **CI Status**: [ready/pending/failed] ([X] missing, [Y] failed)
            **ARC-Reviewer**: [verdict] ([blocking issues: yes/no])
            **Ready for auto-merge**: [yes/no]
            **Action**: [what you're doing]
            ```

            Then provide detailed analysis and take appropriate action.

            ### 9. **Key Advantages Over Multi-Workflow System**
            - ✅ **Real-time response** (no 30-second polling delays)
            - ✅ **Intelligent decision making** (context-aware vs. rule-based)
            - ✅ **Unified error handling** (single point of failure vs. multiple coordination points)
            - ✅ **Adaptive conflict resolution** (contextual strategies vs. rigid automation)
            - ✅ **Transparent communication** (detailed status vs. scattered workflow logs)
            - ✅ **Fail-safe operation** (intelligent fallbacks vs. brittle state management)

            **Remember**: You are replacing 2,063 lines of complex coordination logic with intelligent single-agent management.
            Use the comprehensive context provided to make informed decisions quickly and safely.

      - name: Branch Auto-Update (Conflict Prevention)
        id: branch-update
        if: |
          github.event_name == 'pull_request' &&
          contains(fromJson(steps.pr-context.outputs.result || '{}').mergeable_state || '', 'behind')
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          echo "🔄 Checking if branch needs updating to prevent conflicts..."

          # Get PR context
          PR_DATA='${{ steps.pr-context.outputs.result }}'
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number // empty')
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head_ref // empty')
          BASE_REF=$(echo "$PR_DATA" | jq -r '.base_ref // empty')

          if [ -z "$PR_NUMBER" ] || [ -z "$HEAD_REF" ] || [ -z "$BASE_REF" ]; then
            echo "⚠️ Missing PR context, skipping auto-update"
            exit 0
          fi

          # Configure git for GitHub Actions
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch latest changes
          git fetch origin $BASE_REF --force
          git fetch origin $HEAD_REF --force

      - name: Check Commits Behind (Centralized)
        id: commits-behind-check
        if: github.event.pull_request
        uses: ./.github/actions/git-pr-commands
        with:
          command: commits-behind
          head-sha: ${{ github.event.pull_request.head.sha }}
          base-sha: ${{ github.event.pull_request.base.sha }}

      - name: Process Branch Update Logic
        id: process-update
        env:
          GH_TOKEN: ${{ secrets.GH_TOKEN }}
        run: |
          # Get commits behind from centralized action (if available)
          COMMITS_BEHIND="${{ steps.commits-behind-check.outputs.result || '0' }}"

          PR_DATA='${{ steps.pr-context.outputs.result }}'
          PR_NUMBER=$(echo "$PR_DATA" | jq -r '.number // empty')
          HEAD_REF=$(echo "$PR_DATA" | jq -r '.head_ref // empty')
          BASE_REF=$(echo "$PR_DATA" | jq -r '.base_ref // empty')

          if [ -z "$PR_NUMBER" ] || [ -z "$HEAD_REF" ] || [ -z "$BASE_REF" ]; then
            echo "⚠️ Missing PR context, skipping auto-update"
            exit 0
          fi

          # Configure git for GitHub Actions
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Fetch latest changes
          git fetch origin $BASE_REF --force
          git fetch origin $HEAD_REF --force

          # Check if branch is behind using centralized git commands
          echo "🔍 Checking if branch is behind using reliable git commands"
          echo "Branch is $COMMITS_BEHIND commits behind $BASE_REF"

          if [ "$COMMITS_BEHIND" -gt 0 ]; then
            echo "⚠️ Branch is behind, attempting auto-update..."

            # Switch to PR branch
            git checkout -B $HEAD_REF origin/$HEAD_REF

            # Try merge first (safer for automation)
            echo "🔄 Attempting merge with $BASE_REF..."
            if git merge origin/$BASE_REF --no-edit --no-ff; then
              echo "✅ Merge successful, updating branch..."

              # Validate merge was clean (no conflicts)
              if git diff --quiet HEAD~1 HEAD; then
                echo "⚠️ Merge created no changes - branch was already up to date"
              fi

              git push origin $HEAD_REF
              echo "✅ Branch successfully updated via merge"
              echo "branch_updated=true" >> $GITHUB_OUTPUT
              echo "update_method=merge" >> $GITHUB_OUTPUT

              # Comment on PR about successful update
              gh pr comment $PR_NUMBER --body \
                "🔄 **Auto-update completed**: Branch merged with latest $BASE_REF to prevent conflicts. No manual intervention required."

            else
              echo "❌ Merge failed, trying rebase..."
              git reset --hard origin/$HEAD_REF

              if git rebase origin/$BASE_REF; then
                echo "✅ Rebase successful, updating branch..."

                # Validate rebase was clean
                if git status --porcelain | grep -q "^UU"; then
                  echo "❌ Rebase has unresolved conflicts"
                  git rebase --abort
                  exit 1
                fi

                git push origin $HEAD_REF --force-with-lease
                echo "✅ Branch successfully updated via rebase"
                echo "branch_updated=true" >> $GITHUB_OUTPUT
                echo "update_method=rebase" >> $GITHUB_OUTPUT

                # Comment on PR about successful update
                gh pr comment $PR_NUMBER --body \
                  "🔄 **Auto-update completed**: Branch rebased onto latest $BASE_REF to prevent conflicts. All changes preserved."

              else
                echo "❌ Both merge and rebase failed, conflicts detected"
                echo "branch_updated=false" >> $GITHUB_OUTPUT
                echo "conflicts_detected=true" >> $GITHUB_OUTPUT
                echo "update_method=failed" >> $GITHUB_OUTPUT

                # Comment on PR about conflicts needing manual resolution
                gh pr comment $PR_NUMBER --body "$(cat <<'EOF'
                ⚠️ **Manual conflict resolution required**

                The branch could not be automatically updated due to conflicts. Please resolve conflicts manually:

                \`\`\`bash
                git fetch origin $BASE_REF
                git checkout $HEAD_REF
                git merge origin/$BASE_REF
                # Resolve conflicts in your editor
                git add .
                git commit
                git push origin $HEAD_REF
                \`\`\`

                Or rebase instead:
                \`\`\`bash
                git fetch origin $BASE_REF
                git checkout $HEAD_REF
                git rebase origin/$BASE_REF
                # Resolve conflicts in your editor
                git add .
                git rebase --continue
                git push origin $HEAD_REF --force-with-lease
                \`\`\`
                EOF
                )"
              fi
            fi
          else
            echo "✅ Branch is up to date"
            echo "branch_updated=false" >> $GITHUB_OUTPUT
            echo "update_method=none" >> $GITHUB_OUTPUT
          fi

      - name: Log AI Action Results
        if: always()
        run: |
          echo "## 🤖 AI PR Monitor Execution Summary" >> $GITHUB_STEP_SUMMARY
          echo "- **Event**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Timestamp**: $(date)" >> $GITHUB_STEP_SUMMARY
          PR_NUM=$(echo '${{ steps.pr-context.outputs.result }}' | jq -r '.number // "N/A"')
          echo "- **PR Number**: $PR_NUM" >> $GITHUB_STEP_SUMMARY
          AUTO_MERGE_REQ=$(echo '${{ steps.pr-context.outputs.result }}' | \
            jq -r '.auto_merge_requested // false')
          AUTO_MERGE_METHOD=$(echo '${{ steps.pr-context.outputs.result }}' | \
            jq -r '.auto_merge_method // "none"')
          echo "- **Auto-merge Requested**: $AUTO_MERGE_REQ via $AUTO_MERGE_METHOD" >> \
            $GITHUB_STEP_SUMMARY
          CI_READY=$(echo '${{ steps.pr-context.outputs.result }}' | \
            jq -r '.ci_ready // false')
          echo "- **CI Ready**: $CI_READY" >> $GITHUB_STEP_SUMMARY
          ARC_STATUS=$(echo '${{ steps.pr-context.outputs.result }}' | \
            jq -r '.arc_reviewer_status.verdict // "pending"')
          echo "- **ARC-Reviewer Status**: $ARC_STATUS" >> $GITHUB_STEP_SUMMARY
          READY_FOR_MERGE=$(echo '${{ steps.pr-context.outputs.result }}' | \
            jq -r '.ready_for_auto_merge // false')
          echo "- **Ready for Auto-merge**: $READY_FOR_MERGE" >> $GITHUB_STEP_SUMMARY
          BRANCH_UPDATED="${{ steps.branch-update.outputs.branch_updated || 'not_needed' }}"
          UPDATE_METHOD="${{ steps.branch-update.outputs.update_method || 'none' }}"
          echo "- **Branch Update**: $BRANCH_UPDATED ($UPDATE_METHOD)" >> \
            $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "### 🎯 Enhanced AI-Monitored PR Process" >> $GITHUB_STEP_SUMMARY
          echo "This workflow replaces **2,063 lines** of brittle multi-workflow coordination:" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Real-time CI monitoring (vs 30-minute polling)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Intelligent conflict resolution (vs rigid automation)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Unified auto-merge logic (vs 3 separate workflows)" >> $GITHUB_STEP_SUMMARY
          echo "- ✅ Context-aware decision making (vs rule-based coordination)" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Issue #173**: Replace brittle multi-workflow automation with AI-monitored PR process" >> $GITHUB_STEP_SUMMARY
