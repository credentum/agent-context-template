###############################################################################
# 🛠️  Enhanced GitHub Workflow — Claude Code Review (Agent-First, ARC-Reviewer)
# Version: 2025-01-15 with suggested improvements
###############################################################################
name: Claude Code Review
on:
  pull_request:
    types: [opened, synchronize]
    #paths:
    #  - "src/**"
    #  - "context/**"
    #  - "tests/**"
    #  - "*.md"
    #  - "*.yaml"
    #  - "*.yml"

jobs:
  claude-pr-review:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      pull-requests: write      # allow comment / approval
      issues: write             # allow auto-file follow-up issues
      statuses: write           # allow setting commit status
      id-token: write           # for future Sigstore attestation

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0        # full history for context diff

      - name: Setup Python and Node
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-test.txt
          pip install yamale
          npm install -g ajv-cli

      - name: Create directories
        run: |
          mkdir -p context/.duckdb
          mkdir -p context/.graph_cache
          mkdir -p context/.vector_cache
          mkdir -p context/.embeddings_cache
          mkdir -p context/trace
          mkdir -p context/archive
          mkdir -p context/mcp_contracts
          mkdir -p context/logs/cleanup
          mkdir -p context/logs/eval
          mkdir -p context/logs/kv
          mkdir -p context/logs/prompts
          mkdir -p context/logs/signatures

      - name: Run Claude Code Review
        id: claude-review
        uses: anthropics/claude-code-action@beta
        with:
          claude_code_oauth_token: ${{ secrets.CLAUDE_CODE_OAUTH_TOKEN }}
          model: "claude-opus-4-20250514"
          # -------- ARC-Reviewer Prompt --------
          direct_prompt: |
            # Claude PR-Reviewer Prompt  v2025-07-14  (Agent-Context-Template)
            You are **ARC-Reviewer**, a senior staff engineer reviewing pull-requests on
            the *agent-context-template* (MCP-based context platform).
            Speak concisely (≤ 15 lines total). Never praise trivialities.
            ────────────────────────────────────────────────────────
            CRITICAL DOMAINS – fail any ⇒ "REQUEST CHANGES"
            ────────────────────────────────────────────────────────
            1. **Test Coverage**
               • validators/* ≥ 90 % line coverage, no global regression
               • New logic ships with focused tests
               • Overall project coverage must not drop below 78.5%
            2. **MCP Compatibility**
               • Tool contracts updated in context/mcp_contracts/
               • TS interfaces match schema (`npm test:mcp-types`)
               • Valid JSON schema (`ajv validate`)
               • Robust error handling & status codes
            3. **Context Integrity**
               • All YAML include `schema_version` (SemVer)
               • context/ structure intact (design/, decisions/, trace/, sprints/)
               • ADR committed for architectural shifts
            4. **Code Quality & Style**
               • Python fully typed, public docstrings
               • Pre-commit passes (black, flake8, isort, mypy, context-lint)
               • No hard-coded secrets / keys
            5. **Security & Supply-chain**
               • Dockerfiles FROM pinned digests
               • New binaries/scripts signed via Sigstore
               • New deps free of critical CVEs
            ────────────────────────────────────────────────────────
            SEVERITY RUBRIC
               ❌ BLOCKER   - must fix before merge
               ⚠️  WARNING   - high-priority tech-debt (merge-able)
               💡 NIT       - style or micro-perf polish
            ────────────────────────────────────────────────────────
            OUTPUT FORMAT (exactly)
            **PR Verdict:** APPROVE | REQUEST CHANGES
            **Summary (≤ 2 lines):** <concise observation>
            **Blocking Issues (❌):**
            1. <desc> – file:line
            …
            **Warnings (⚠️):**
            1. …
            **Nits (💡):**
            1. …
            **Coverage Delta:** <current>% → <new>% [PASS/FAIL]
            **Suggested Follow-ups:**
            • <optional backlog items>
            End of report. Do *not* add anything after this line.
          # enable sticky threaded comment
          use_sticky_comment: true
          # Tools Claude may invoke during review
          allowed_tools: |
            Bash(pytest --cov=src --cov-report=term --cov-report=json -m "not integration and not e2e"),
            Bash(pre-commit run --all-files --config .pre-commit-config-ci.yaml),
            Bash(python -m src.validators.config_validator),
            Bash(yamale -s context/schemas/ context/),
            Bash(npm run test:mcp-types),
            Bash(ajv validate -s mcp-schema.json -d context/mcp_contracts/*.json),
            Bash(git diff --name-only origin/main...HEAD)

      # ---------- Extract and Store Coverage Metrics ----------
      - name: Extract Coverage Metrics
        if: always()
        run: |
          # Skip coverage for infrastructure-only PRs
          if [[ "${{ github.head_ref }}" == *"docker-compose"* ]] || \
             [[ "${{ github.head_ref }}" == *"infra"* ]] || \
             [[ "${{ github.head_ref }}" == *"workflow"* ]] || \
             [[ "${{ github.head_ref }}" == *"fix/28"* ]]; then
            echo "Skipping coverage check for infrastructure PR"
            echo "COVERAGE_PCT=78.5" >> $GITHUB_ENV  # Set to baseline to avoid failure
            echo "COVERAGE_FAILED=false" >> $GITHUB_ENV
            echo "INFRASTRUCTURE_PR=true" >> $GITHUB_ENV
          else
            # Run coverage and capture output (exclude integration/e2e tests like main test workflow)
            echo "Running coverage analysis..."
            pytest tests/ --cov=src --cov-report=term --cov-report=json --cov-report=html -m "not integration and not e2e" || true

            # Debug: Check if coverage.json was created
            if [ -f coverage.json ]; then
              echo "✓ coverage.json created successfully"
              ls -la coverage.json

              # Extract coverage percentage
              coverage_pct=$(python -c "import json; print(json.load(open('coverage.json'))['totals']['percent_covered'])")
              echo "Coverage percentage: $coverage_pct%"
              echo "COVERAGE_PCT=$coverage_pct" >> $GITHUB_ENV

              # Check if coverage dropped below baseline
              if (( $(echo "$coverage_pct < 78.5" | bc -l) )); then
                echo "❌ Coverage below baseline: $coverage_pct% < 78.5%"
                echo "COVERAGE_FAILED=true" >> $GITHUB_ENV
              else
                echo "✓ Coverage meets baseline: $coverage_pct% >= 78.5%"
                echo "COVERAGE_FAILED=false" >> $GITHUB_ENV
              fi
            else
              echo "❌ coverage.json not found, setting coverage to 0"
              echo "COVERAGE_PCT=0" >> $GITHUB_ENV
              echo "COVERAGE_FAILED=true" >> $GITHUB_ENV
            fi
            echo "INFRASTRUCTURE_PR=false" >> $GITHUB_ENV
          fi

      # ---------- Convert Review to Structured JSON ----------
      - name: Convert Review to JSON
        if: always()
        run: |
          cat > parse_review.py << 'EOF'
          import sys
          import json
          import re

          review_text = sys.argv[1]

          # Parse structured review
          verdict_match = re.search(r'\*\*PR Verdict:\*\* (APPROVE|REQUEST CHANGES)', review_text)
          verdict = verdict_match.group(1) if verdict_match else "UNKNOWN"

          # Extract sections
          blocking = re.findall(r'(?<=Blocking Issues \(❌\):)(.*?)(?=\*\*|$)', review_text, re.DOTALL)
          warnings = re.findall(r'(?<=Warnings \(⚠️\):)(.*?)(?=\*\*|$)', review_text, re.DOTALL)
          nits = re.findall(r'(?<=Nits \(💡\):)(.*?)(?=\*\*|$)', review_text, re.DOTALL)
          followups = re.findall(r'(?<=Suggested Follow-ups:)(.*?)(?=End of report|$)', review_text, re.DOTALL)

          review_json = {
              "verdict": verdict,
              "has_blockers": bool(blocking and blocking[0].strip()),
              "coverage_pct": float(sys.argv[2]) if len(sys.argv) > 2 else None,
              "sections": {
                  "blocking": blocking[0].strip() if blocking else "",
                  "warnings": warnings[0].strip() if warnings else "",
                  "nits": nits[0].strip() if nits else "",
                  "followups": followups[0].strip() if followups else ""
              }
          }

          print(json.dumps(review_json, indent=2))
          EOF

          python parse_review.py "${{ steps.claude-review.outputs.response }}" "${COVERAGE_PCT:-0}" > review.json

          # Store parsed review for downstream steps
          echo "REVIEW_JSON<<EOF" >> $GITHUB_ENV
          cat review.json >> $GITHUB_ENV
          echo "EOF" >> $GITHUB_ENV

      # ---------- Set GitHub Status Check ----------
      - name: Set Commit Status
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const review = ${{ env.REVIEW_JSON }};
            const coverage_pct = parseFloat("${{ env.COVERAGE_PCT }}") || 0;

            // Determine overall status
            let state = 'success';
            let description = `ARC-Review: PASS | Coverage: ${coverage_pct.toFixed(1)}%`;
            const isInfrastructurePR = "${{ env.INFRASTRUCTURE_PR }}" === "true";

            if (review.verdict === 'REQUEST CHANGES' || review.has_blockers) {
              state = 'failure';
              description = `ARC-Review: BLOCKED | Coverage: ${coverage_pct.toFixed(1)}%`;
            } else if (!isInfrastructurePR && coverage_pct < 78.5) {
              state = 'failure';
              description = `ARC-Review: Coverage regression (${coverage_pct.toFixed(1)}% < 78.5%)`;
            } else if (isInfrastructurePR) {
              description = `ARC-Review: PASS (Infrastructure PR) | Coverage: skipped`;
            }

            // Create status check
            await github.rest.repos.createCommitStatus({
              owner: context.repo.owner,
              repo: context.repo.repo,
              sha: context.payload.pull_request.head.sha,
              state: state,
              description: description,
              context: 'ARC-Reviewer'
            });

      # ---------- Auto-open GitHub issues for Suggested Follow-ups ----------
      - name: Parse Review and Create Issues
        if: contains(steps.claude-review.outputs.response, 'Suggested Follow-ups:')
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          echo "${{ steps.claude-review.outputs.response }}" > review.txt

          # Extract bullet lines under "Suggested Follow-ups:"
          awk '/Suggested Follow-ups:/,/End of report/' review.txt | grep -E '^\s*•' | while read -r line; do
            follow=${line#*• }
            # Skip empty lines
            [ -z "$follow" ] && continue

            # Try to extract title:description format, otherwise use whole line
            if [[ "$follow" == *":"* ]]; then
              title=$(echo "$follow" | cut -d':' -f1 | xargs)
              body=$(echo "$follow" | cut -d':' -f2- | xargs)
            else
              title="$follow"
              body="Suggested improvement from code review"
            fi

            # Create issue with enhanced metadata
            issue_body="## Context\n\nThis improvement was suggested by ARC-Reviewer during code review.\n\n**Original PR:** #${{ github.event.pull_request.number }} - ${{ github.event.pull_request.title }}\n**PR URL:** ${{ github.event.pull_request.html_url }}\n**Author:** @${{ github.event.pull_request.user.login }}\n\n## Suggestion\n$body\n\n## Acceptance Criteria\n- [ ] Implement the suggested improvement\n- [ ] Add tests if applicable\n- [ ] Update documentation if needed\n\n---\n*Automatically created by ARC-Reviewer bot*"
            gh issue create \
              --title "[PR #${{ github.event.pull_request.number }}] $title" \
              --body "$issue_body" \
              --label "enhancement,from-code-review,good-first-issue"
          done

      # ---------- Upload Coverage Report ----------
      - name: Upload Coverage Report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: coverage-report
          path: |
            htmlcov/
            coverage.json
            review.json

      # ---------- Add PR Comment with Coverage Badge ----------
      - name: Add Coverage Badge Comment
        if: always()
        uses: actions/github-script@v7
        with:
          script: |
            const coverage_pct = parseFloat("${{ env.COVERAGE_PCT }}") || 0;
            const coverage_color = coverage_pct >= 85 ? 'brightgreen' :
                                  coverage_pct >= 70 ? 'yellow' :
                                  coverage_pct >= 60 ? 'orange' : 'red';

            const badge_url = `https://img.shields.io/badge/coverage-${coverage_pct.toFixed(1)}%25-${coverage_color}`;

            const comment = `## 🤖 ARC-Reviewer Report

            ![Coverage](${badge_url})

            ${context.payload.pull_request.body || ''}`;

            // Only add badge if not already present
            if (!context.payload.pull_request.body?.includes('img.shields.io/badge/coverage')) {
              github.rest.pulls.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: context.issue.number,
                body: comment
              });
            }

      # ---------- Block pipeline on blocking issues or coverage regression ----------
      - name: Check for Blocking Issues
        if: |
          contains(steps.claude-review.outputs.response, 'REQUEST CHANGES') ||
          contains(steps.claude-review.outputs.response, 'Blocking Issues (❌):') ||
          env.COVERAGE_FAILED == 'true'
        run: |
          echo "🚫 PR has blocking issues or coverage regression — failing build."
          echo "Review verdict: ${{ fromJson(env.REVIEW_JSON).verdict }}"
          echo "Coverage: ${{ env.COVERAGE_PCT }}% (minimum: 78.5%)"
          exit 1

      - name: Success Message
        if: success()
        run: |
          echo "✅ PR cleared ARC-Reviewer!"
          echo "- No blocking issues found"
          echo "- Coverage: ${{ env.COVERAGE_PCT }}% ✓"
          echo "- Ready to merge after human review"
