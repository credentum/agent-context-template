---
###############################################################################
# üöÄ Auto-Merge Workflow - Intelligent PR Merging
# Automatically merges PRs after CI passes and ARC-Reviewer shows APPROVE
###############################################################################
name: Auto-Merge PR

on:
  pull_request:
    types: [opened, synchronize, reopened]
  check_suite:
    types: [completed]
  status: {}

jobs:
  auto-merge:
    name: "üîÑ Auto-Merge Controller"
    runs-on: ubuntu-latest
    if: github.event.pull_request.draft == false

    permissions:
      contents: write
      pull-requests: write
      checks: read
      statuses: read

    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Get PR information
        id: pr-info
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const { data: pr } = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.issue.number || context.payload.pull_request.number
            });

            return JSON.stringify({
              number: pr.number,
              head_sha: pr.head.sha,
              base_ref: pr.base.ref,
              mergeable: pr.mergeable,
              mergeable_state: pr.mergeable_state,
              merge_state_status: pr.mergeStateStatus,
              auto_merge: pr.auto_merge,
              title: pr.title,
              body: pr.body,
              user: pr.user.login,
              labels: pr.labels.map(l => l.name)
            });

      - name: Parse PR info
        id: pr-parsed
        run: |
          # Write PR JSON to a temporary file to avoid shell parsing issues
          cat > /tmp/pr_info.json << 'EOF'
          ${{ steps.pr-info.outputs.result }}
          EOF

          echo "pr_number=$(cat /tmp/pr_info.json | jq -r '.number')" >> $GITHUB_OUTPUT
          echo "head_sha=$(cat /tmp/pr_info.json | jq -r '.head_sha')" >> $GITHUB_OUTPUT
          echo "base_ref=$(cat /tmp/pr_info.json | jq -r '.base_ref')" >> $GITHUB_OUTPUT
          echo "mergeable=$(cat /tmp/pr_info.json | jq -r '.mergeable')" >> $GITHUB_OUTPUT
          echo "mergeable_state=$(cat /tmp/pr_info.json | jq -r '.mergeable_state')" >> $GITHUB_OUTPUT
          echo "merge_state_status=$(cat /tmp/pr_info.json | jq -r '.merge_state_status')" >> $GITHUB_OUTPUT
          echo "github_auto_merge_enabled=$(cat /tmp/pr_info.json | jq -r '.auto_merge != null')" >> $GITHUB_OUTPUT
          echo "pr_title=$(cat /tmp/pr_info.json | jq -r '.title')" >> $GITHUB_OUTPUT
          echo "pr_user=$(cat /tmp/pr_info.json | jq -r '.user')" >> $GITHUB_OUTPUT

          # Check if PR has auto-merge enabled via multiple methods
          LABELS=$(cat /tmp/pr_info.json | jq -r '.labels[]' 2>/dev/null || echo "")
          PR_BODY=$(cat /tmp/pr_info.json | jq -r '.body // ""')

          # Method 1: Check for auto-merge label (legacy method)
          if echo "$LABELS" | grep -q "auto-merge"; then
            echo "auto_merge_enabled=true" >> $GITHUB_OUTPUT
            echo "auto_merge_method=label" >> $GITHUB_OUTPUT
          else
            # Method 2: Parse YAML frontmatter for structured metadata (preferred)
            # Clean PR body content to remove shell artifacts that can corrupt YAML parsing
            echo "$PR_BODY" | sed 's/< \/dev\/null |//g' > /tmp/pr_body.txt

            # Extract YAML frontmatter
            if grep -q "^---" /tmp/pr_body.txt; then
              echo "üîç Found YAML frontmatter, parsing structured metadata..."

              # Extract YAML content between --- markers
              YAML_CONTENT=$(sed -n '/^---$/,/^---$/p' /tmp/pr_body.txt | sed '1d;$d')

              if [ -n "$YAML_CONTENT" ]; then
                echo "$YAML_CONTENT" > /tmp/pr_metadata.yaml

                # Use Python to safely parse YAML and extract auto_merge flag
                AUTO_MERGE_FLAG=$(python3 -c "
                import yaml; f=open('/tmp/pr_metadata.yaml','r');
                metadata=yaml.safe_load(f); f.close();
                pr_metadata=metadata.get('pr_metadata',{}) if isinstance(metadata,dict) else {};
                automation_flags=pr_metadata.get('automation_flags',{});
                auto_merge=automation_flags.get('auto_merge',False);
                print('true' if auto_merge else 'false')
                " 2>/dev/null || echo "false")

                if [ "$AUTO_MERGE_FLAG" = "true" ]; then
                  echo "auto_merge_enabled=true" >> $GITHUB_OUTPUT
                  echo "auto_merge_method=yaml_metadata" >> $GITHUB_OUTPUT
                  echo "‚úÖ Auto-merge enabled via YAML metadata"
                else
                  echo "auto_merge_enabled=false" >> $GITHUB_OUTPUT
                  echo "auto_merge_method=yaml_metadata_disabled" >> $GITHUB_OUTPUT
                fi

                # Clean up
                rm -f /tmp/pr_metadata.yaml
              else
                echo "‚ö†Ô∏è Empty YAML frontmatter, falling back to text parsing"
                # Fallback to legacy text parsing
                AUTO_MERGE_IN_BODY=$(echo "$PR_BODY" | grep -i "auto.*merge" || echo "")
                if [ -n "$AUTO_MERGE_IN_BODY" ]; then
                  echo "auto_merge_enabled=true" >> $GITHUB_OUTPUT
                  echo "auto_merge_method=text_search" >> $GITHUB_OUTPUT
                else
                  echo "auto_merge_enabled=false" >> $GITHUB_OUTPUT
                  echo "auto_merge_method=none" >> $GITHUB_OUTPUT
                fi
              fi
            else
              echo "üìã No YAML frontmatter found, using legacy text parsing"
              # Fallback to legacy text parsing for backward compatibility
              AUTO_MERGE_IN_BODY=$(echo "$PR_BODY" | grep -i "auto.*merge" || echo "")
              if [ -n "$AUTO_MERGE_IN_BODY" ]; then
                echo "auto_merge_enabled=true" >> $GITHUB_OUTPUT
                echo "auto_merge_method=text_search_legacy" >> $GITHUB_OUTPUT
              else
                echo "auto_merge_enabled=false" >> $GITHUB_OUTPUT
                echo "auto_merge_method=none" >> $GITHUB_OUTPUT
              fi
            fi

            # Clean up
            rm -f /tmp/pr_body.txt
          fi

          # Clean up temporary file
          rm -f /tmp/pr_info.json

      - name: Check for test coverage
        id: test-coverage
        run: |
          echo "üß™ Checking test coverage for new functionality..."

          # Get list of changed files
          git fetch origin ${{ steps.pr-parsed.outputs.base_ref }}
          CHANGED_FILES=$(git diff --name-only origin/${{ steps.pr-parsed.outputs.base_ref }}...HEAD)
          echo "Changed files:"
          echo "$CHANGED_FILES"

          # Check if workflow files were modified (indicating new functionality)
          WORKFLOW_CHANGES=$(echo "$CHANGED_FILES" | grep "\.github/workflows/" || echo "")
          TEST_FILES=$(echo "$CHANGED_FILES" | grep "^tests/test_.*\.py$" || echo "")

          if [ -n "$WORKFLOW_CHANGES" ]; then
            echo "üìã Workflow changes detected:"
            echo "$WORKFLOW_CHANGES"

            # Count test files added/modified
            TEST_COUNT=$(echo "$TEST_FILES" | grep -v "^$" | wc -l)
            echo "üß™ Test files found: $TEST_COUNT"
            echo "$TEST_FILES"

            if [ "$TEST_COUNT" -gt 0 ]; then
              echo "tests_found=true" >> $GITHUB_OUTPUT
              echo "test_count=$TEST_COUNT" >> $GITHUB_OUTPUT
              echo "‚úÖ Found $TEST_COUNT test files for workflow changes"
            else
              echo "tests_found=false" >> $GITHUB_OUTPUT
              echo "test_count=0" >> $GITHUB_OUTPUT
              echo "‚ö†Ô∏è No test files found for workflow changes"
            fi
          else
            echo "tests_found=true" >> $GITHUB_OUTPUT
            echo "test_count=0" >> $GITHUB_OUTPUT
            echo "‚úÖ No workflow changes detected - test coverage check passed"
          fi

      - name: Auto-update branch to prevent conflicts
        id: auto-update
        run: |
          echo "üîÑ Checking if branch needs updating..."

          # Configure git
          git config user.name "github-actions[bot]"
          git config user.email "github-actions[bot]@users.noreply.github.com"

          # Get current branch info
          HEAD_SHA="${{ steps.pr-parsed.outputs.head_sha }}"
          BASE_REF="${{ steps.pr-parsed.outputs.base_ref }}"
          PR_NUMBER="${{ steps.pr-parsed.outputs.pr_number }}"

          echo "HEAD_SHA: $HEAD_SHA"
          echo "BASE_REF: $BASE_REF"
          echo "PR_NUMBER: $PR_NUMBER"

          # Fetch latest changes with force to ensure we have the latest
          git fetch origin $BASE_REF --force
          git fetch origin ${{ github.head_ref }} --force

          # Get the latest commit SHA from base branch
          LATEST_BASE_SHA=$(git rev-parse origin/$BASE_REF)
          echo "LATEST_BASE_SHA: $LATEST_BASE_SHA"

          # Check if branch is behind base using commits-behind count
          COMMITS_BEHIND=$(git rev-list --count $HEAD_SHA..origin/$BASE_REF)
          echo "COMMITS_BEHIND: $COMMITS_BEHIND"

          if [ "$COMMITS_BEHIND" -gt 0 ]; then
            echo "‚ö†Ô∏è Branch is $COMMITS_BEHIND commits behind $BASE_REF, attempting auto-update..."

            # Switch to PR branch
            git checkout $HEAD_SHA

            # Try merge first (safer than rebase for automation)
            echo "üîÑ Attempting merge with $BASE_REF..."
            if git merge origin/$BASE_REF --no-edit; then
              echo "‚úÖ Merge successful, updating branch..."

              # Push the updated branch
              git push origin HEAD:refs/heads/${{ github.head_ref }} --force-with-lease

              echo "‚úÖ Branch successfully updated via merge"
              echo "branch_updated=true" >> $GITHUB_OUTPUT
              echo "update_method=merge" >> $GITHUB_OUTPUT
            else
              echo "‚ùå Merge failed, trying rebase..."

              # Reset to original state
              git reset --hard $HEAD_SHA

              # Try rebase as fallback
              if git rebase origin/$BASE_REF; then
                echo "‚úÖ Rebase successful, updating branch..."

                # Push the updated branch
                git push origin HEAD:refs/heads/${{ github.head_ref }} --force-with-lease

                echo "‚úÖ Branch successfully updated via rebase"
                echo "branch_updated=true" >> $GITHUB_OUTPUT
                echo "update_method=rebase" >> $GITHUB_OUTPUT
              else
                echo "‚ùå Both merge and rebase failed, conflicts detected"
                echo "Manual intervention required for conflict resolution"
                echo "branch_updated=false" >> $GITHUB_OUTPUT
                echo "conflicts_detected=true" >> $GITHUB_OUTPUT
                echo "update_method=failed" >> $GITHUB_OUTPUT
              fi
            fi
          else
            echo "‚úÖ Branch is up to date"
            echo "branch_updated=false" >> $GITHUB_OUTPUT
            echo "conflicts_detected=false" >> $GITHUB_OUTPUT
            echo "update_method=none" >> $GITHUB_OUTPUT
          fi

      - name: Wait for CI completion
        id: wait-ci
        uses: actions/github-script@v7
        with:
          timeout-minutes: 30
          result-encoding: string
          script: |
            const pr_number = ${{ steps.pr-parsed.outputs.pr_number }};
            const head_sha = "${{ steps.pr-parsed.outputs.head_sha }}";

            // Required checks that must pass
            const requiredChecks = [
              'claude-pr-review',
              'ARC-Reviewer',
              'üìä Coverage Analysis',
              'üîç Lint & Style',
              'üß™ Core Tests',
              'üîó Integration Tests'
            ];

            console.log(`Waiting for CI completion on PR #${pr_number} (SHA: ${head_sha})`);

            let attempts = 0;
            const maxAttempts = 60; // 30 minutes with 30-second intervals

            while (attempts < maxAttempts) {
              // Get check runs for the commit
              const { data: checkRuns } = await github.rest.checks.listForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: head_sha,
                per_page: 100
              });

              // Get status checks for the commit
              const { data: statusChecks } = await github.rest.repos.getCombinedStatusForRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref: head_sha
              });

              console.log(`Attempt ${attempts + 1}/${maxAttempts}: ` +
                         `Found ${checkRuns.check_runs.length} check runs, ` +
                         `${statusChecks.statuses.length} status checks`);

              // Check if all required checks are present and completed
              const allChecks = [
                ...checkRuns.check_runs.map(run => ({
                  name: run.name,
                  status: run.status,
                  conclusion: run.conclusion
                })),
                ...statusChecks.statuses.map(status => ({
                  name: status.context,
                  status: status.state === 'pending' ? 'in_progress' : 'completed',
                  conclusion: status.state
                }))
              ];

              console.log('Current checks:', allChecks.map(c => `${c.name}: ${c.status}/${c.conclusion}`));

              // Check if all required checks are completed
              let allCompleted = true;
              let allPassed = true;
              const missingChecks = [];

              for (const requiredCheck of requiredChecks) {
                const check = allChecks.find(c => c.name === requiredCheck || c.name.includes(requiredCheck));
                if (!check) {
                  missingChecks.push(requiredCheck);
                  allCompleted = false;
                } else if (check.status !== 'completed') {
                  allCompleted = false;
                  console.log(`${requiredCheck} is still ${check.status}`);
                } else if (check.conclusion !== 'success' && check.conclusion !== 'SUCCESS' && check.conclusion !== 'skipped') {
                  allPassed = false;
                  console.log(`${requiredCheck} failed with conclusion: ${check.conclusion}`);
                } else if (check.conclusion === 'skipped') {
                  console.log(`${requiredCheck} was skipped - treating as success`);
                }
              }

              if (missingChecks.length > 0) {
                console.log(`Missing checks: ${missingChecks.join(', ')}`);
              }

              if (allCompleted) {
                if (allPassed) {
                  console.log('‚úÖ All required checks passed!');
                  return 'success';
                } else {
                  console.log('‚ùå Some checks failed');
                  return 'failure';
                }
              }

              // Wait 30 seconds before next check
              await new Promise(resolve => setTimeout(resolve, 30000));
              attempts++;
            }

            console.log('‚è∞ Timeout waiting for CI completion');
            return 'timeout';

      - name: Check ARC-Reviewer verdict
        id: arc-verdict
        if: steps.wait-ci.outputs.result == 'success'
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const pr_number = ${{ steps.pr-parsed.outputs.pr_number }};

            // Get comments from the PR
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: pr_number
            });

            // Look for ARC-Reviewer comment
            const arcComment = comments.find(comment =>
              (comment.user.type === 'Bot' || comment.user.login === 'claude') &&
              (comment.body.includes('ARC-Reviewer') || comment.body.includes('schema_version'))
            );

            if (!arcComment) {
              console.log('No ARC-Reviewer comment found');
              return 'no-review';
            }

            const reviewBody = arcComment.body;
            console.log('ARC-Reviewer comment found');

            // Extract YAML content (handle both code block and plain text formats)
            let yamlContent = reviewBody;
            const yamlMatch = reviewBody.match(/```yaml\s*\n([\s\S]*?)\n```/) ||
                            reviewBody.match(/```\s*\n([\s\S]*?)\n```/);
            if (yamlMatch) {
              yamlContent = yamlMatch[1];
              console.log('Found YAML in code block');
            } else {
              console.log('Processing plain text format');
            }

            // Parse YAML content for verdict
            const verdictMatch = yamlContent.match(/verdict:\s*['"]*([^'"\\n]+)['"]*/) ||
                               yamlContent.match(/verdict:\s*"?(APPROVE|REQUEST_CHANGES)"?/);

            if (verdictMatch) {
              const verdict = verdictMatch[1].trim();
              console.log(`‚úÖ ARC-Reviewer verdict: ${verdict}`);

              if (verdict === 'APPROVE') {
                // Check for blocking issues in YAML (nested under issues:)
                const blockingMatch = yamlContent.match(/issues:\s*\n\s*blocking:\s*\[\s*\]/) ||
                                     yamlContent.match(/blocking:\s*\[\s*\]/) ||
                                     yamlContent.match(/blocking:\s*\[\]/);

                if (blockingMatch) {
                  console.log('‚úÖ No blocking issues found');
                  return 'approved';
                } else {
                  // Check if there are actual blocking issues
                  const hasBlockingIssues = yamlContent.match(/blocking:\s*\n\s*-/) ||
                                          yamlContent.match(/blocking:\s*\[.*\S.*\]/);
                  if (hasBlockingIssues) {
                    console.log('‚ùå Blocking issues found in APPROVE verdict');
                    // Extract and log blocking issues for visibility
                    const blockingSection = yamlContent.match(/blocking:\s*\n((?:\s*-.*\n?)*)/);
                    if (blockingSection) {
                      console.log('üìã Blocking issues details:');
                      console.log(blockingSection[1]);
                    }
                    return 'blocking-issues';
                  }
                  return 'approved';
                }
              } else if (verdict === 'REQUEST_CHANGES') {
                console.log('‚ùå ARC-Reviewer verdict: REQUEST_CHANGES');
                // Extract and log blocking issues for visibility
                const blockingSection = yamlContent.match(/blocking:\s*\n((?:\s*-.*\n?)*)/);
                if (blockingSection) {
                  console.log('üìã Blocking issues details:');
                  console.log(blockingSection[1]);
                }
                return 'changes-requested';
              }
            }

            console.log('‚ùì ARC-Reviewer verdict unclear');
            return 'unclear';

      - name: Final conflict validation
        id: final-conflict-check
        if: steps.wait-ci.outputs.result == 'success' && steps.arc-verdict.outputs.result == 'approved'
        run: |
          echo "üîç Performing final conflict validation..."

          # Get current PR merge status from GitHub API
          CURRENT_PR_STATUS=$(gh pr view ${{ steps.pr-parsed.outputs.pr_number }} --json mergeable,mergeStateStatus --jq '{mergeable: .mergeable, state: .mergeStateStatus}')
          echo "Current PR status: $CURRENT_PR_STATUS"

          CURRENT_MERGEABLE=$(echo "$CURRENT_PR_STATUS" | jq -r '.mergeable')
          CURRENT_MERGE_STATE=$(echo "$CURRENT_PR_STATUS" | jq -r '.state')

          echo "current_mergeable=$CURRENT_MERGEABLE" >> $GITHUB_OUTPUT
          echo "current_merge_state=$CURRENT_MERGE_STATE" >> $GITHUB_OUTPUT

          # Check GitHub's definitive merge status
          if [ "$CURRENT_MERGEABLE" = "CONFLICTING" ]; then
            echo "‚ùå GitHub reports PR has conflicts (CONFLICTING)"
            echo "conflicts_exist=true" >> $GITHUB_OUTPUT
            echo "conflict_reason=github_conflicting" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_MERGE_STATE" = "DIRTY" ]; then
            echo "‚ùå Merge state is DIRTY - conflicts or issues exist"
            echo "conflicts_exist=true" >> $GITHUB_OUTPUT
            echo "conflict_reason=dirty_state" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_MERGE_STATE" = "BLOCKED" ]; then
            echo "‚ùå Merge state is BLOCKED - branch protection or other issues"
            echo "conflicts_exist=true" >> $GITHUB_OUTPUT
            echo "conflict_reason=blocked_state" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_MERGE_STATE" = "BEHIND" ]; then
            echo "‚ö†Ô∏è Merge state is BEHIND - branch needs updating"
            echo "conflicts_exist=false" >> $GITHUB_OUTPUT
            echo "conflict_reason=behind_state" >> $GITHUB_OUTPUT
            echo "needs_update=true" >> $GITHUB_OUTPUT
          elif [ "$CURRENT_MERGEABLE" = "MERGEABLE" ] && [ "$CURRENT_MERGE_STATE" = "CLEAN" ]; then
            echo "‚úÖ PR is clean and mergeable"
            echo "conflicts_exist=false" >> $GITHUB_OUTPUT
            echo "conflict_reason=none" >> $GITHUB_OUTPUT
          else
            echo "‚ö†Ô∏è Unexpected merge status: mergeable=$CURRENT_MERGEABLE, state=$CURRENT_MERGE_STATE"
            echo "conflicts_exist=true" >> $GITHUB_OUTPUT
            echo "conflict_reason=unexpected_status" >> $GITHUB_OUTPUT
          fi

      - name: Auto-merge decision
        id: merge-decision
        if: steps.wait-ci.outputs.result == 'success' && steps.arc-verdict.outputs.result == 'approved'
        run: |
          echo "üéØ Auto-merge conditions evaluation:"
          echo "- CI Status: ‚úÖ PASSED"
          echo "- ARC-Reviewer: ‚úÖ APPROVED"
          echo "- No blocking issues: ‚úÖ CONFIRMED"
          echo "- Test Coverage: ${{ steps.test-coverage.outputs.tests_found }}"
          echo "- Original mergeable: ${{ steps.pr-parsed.outputs.mergeable }}"
          echo "- Original merge state: ${{ steps.pr-parsed.outputs.mergeable_state }}"
          echo "- Original merge state status: ${{ steps.pr-parsed.outputs.merge_state_status }}"
          echo "- Current mergeable: ${{ steps.final-conflict-check.outputs.current_mergeable }}"
          echo "- Current merge state: ${{ steps.final-conflict-check.outputs.current_merge_state }}"
          echo "- Base branch: ${{ steps.pr-parsed.outputs.base_ref }}"
          echo "- Branch updated: ${{ steps.auto-update.outputs.branch_updated }}"
          echo "- Auto-update conflicts: ${{ steps.auto-update.outputs.conflicts_detected }}"
          echo "- Final conflicts exist: ${{ steps.final-conflict-check.outputs.conflicts_exist }}"
          echo "- Conflict reason: ${{ steps.final-conflict-check.outputs.conflict_reason }}"

          # Primary conflict checks (hard blockers)
          if [ "${{ steps.auto-update.outputs.conflicts_detected }}" = "true" ]; then
            echo "ready_to_merge=false" >> $GITHUB_OUTPUT
            echo "block_reason=auto_update_conflicts" >> $GITHUB_OUTPUT
            echo "‚ùå BLOCKED: Conflicts detected during auto-update - manual intervention required"
          elif [ "${{ steps.final-conflict-check.outputs.conflicts_exist }}" = "true" ]; then
            echo "ready_to_merge=false" >> $GITHUB_OUTPUT
            echo "block_reason=${{ steps.final-conflict-check.outputs.conflict_reason }}" >> $GITHUB_OUTPUT
            echo "‚ùå BLOCKED: Final conflict check failed - ${{ steps.final-conflict-check.outputs.conflict_reason }}"
          elif [ "${{ steps.test-coverage.outputs.tests_found }}" = "false" ]; then
            echo "ready_to_merge=false" >> $GITHUB_OUTPUT
            echo "block_reason=missing_test_coverage" >> $GITHUB_OUTPUT
            echo "‚ùå BLOCKED: Test coverage required for workflow changes"
          else
            echo "ready_to_merge=true" >> $GITHUB_OUTPUT
            echo "block_reason=none" >> $GITHUB_OUTPUT
            echo "‚úÖ APPROVED: All safety checks passed"
          fi

      - name: Enable auto-merge
        id: enable-auto-merge
        if: steps.merge-decision.outputs.ready_to_merge == 'true'
        uses: actions/github-script@v7
        with:
          result-encoding: string
          script: |
            const pr_number = ${{ steps.pr-parsed.outputs.pr_number }};

            try {
              // Enable auto-merge with squash using GraphQL API
              const mutation = `
                mutation EnableAutoMerge($pullRequestId: ID!, $mergeMethod: PullRequestMergeMethod!) {
                  enablePullRequestAutoMerge(input: {
                    pullRequestId: $pullRequestId
                    mergeMethod: $mergeMethod
                  }) {
                    pullRequest {
                      autoMergeRequest {
                        enabledAt
                      }
                    }
                  }
                }
              `;

              // First get the PR node ID
              const { data: pr } = await github.rest.pulls.get({
                owner: context.repo.owner,
                repo: context.repo.repo,
                pull_number: pr_number
              });

              const result = await github.graphql(mutation, {
                pullRequestId: pr.node_id,
                mergeMethod: 'SQUASH'
              });

              console.log('‚úÖ Auto-merge enabled successfully');

              // Add comment to PR
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `üöÄ **Auto-merge enabled!**

                ‚úÖ All conditions met:
                - CI checks passed
                - ARC-Reviewer approved (no blocking issues)
                - PR is mergeable

                The PR will be automatically merged when all required status checks pass.

                _This is an automated message from the auto-merge workflow._`
              });

              return 'enabled';
            } catch (error) {
              console.error('Failed to enable auto-merge:', error);
              return 'failed';
            }

      - name: Handle auto-merge failure
        if: >
          steps.wait-ci.outputs.result != 'success' ||
          steps.arc-verdict.outputs.result != 'approved' ||
          steps.merge-decision.outputs.ready_to_merge != 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const pr_number = ${{ steps.pr-parsed.outputs.pr_number }};
            const ciResult = '${{ steps.wait-ci.outputs.result }}';
            const arcResult = '${{ steps.arc-verdict.outputs.result }}';
            const blockReason = '${{ steps.merge-decision.outputs.block_reason }}';
            const conflictsExist = '${{ steps.final-conflict-check.outputs.conflicts_exist }}';
            const conflictReason = '${{ steps.final-conflict-check.outputs.conflict_reason }}';
            const currentMergeable = '${{ steps.final-conflict-check.outputs.current_mergeable }}';
            const currentMergeState = '${{ steps.final-conflict-check.outputs.current_merge_state }}';

            let reason = 'Unknown reason';
            let emoji = '‚ùì';

            if (ciResult === 'timeout') {
              reason = 'CI checks timed out after 30 minutes';
              emoji = '‚è∞';
            } else if (ciResult === 'failure') {
              reason = 'CI checks failed';
              emoji = '‚ùå';
            } else if (arcResult === 'no-review') {
              reason = 'ARC-Reviewer has not completed review';
              emoji = '‚è≥';
            } else if (arcResult === 'changes-requested') {
              reason = 'ARC-Reviewer requested changes';
              emoji = 'üîÑ';
            } else if (arcResult === 'blocking-issues') {
              reason = 'ARC-Reviewer found blocking issues';
              emoji = 'üö´';
            } else if (arcResult === 'unclear') {
              reason = 'ARC-Reviewer verdict is unclear';
              emoji = '‚ùì';
            } else if (blockReason === 'auto_update_conflicts') {
              reason = 'Conflicts detected during branch auto-update - manual resolution required';
              emoji = 'üîÑ';
            } else if (blockReason === 'github_conflicting') {
              reason = 'GitHub reports PR has conflicts (CONFLICTING state)';
              emoji = '‚ö†Ô∏è';
            } else if (blockReason === 'dirty_state') {
              reason = 'PR merge state is DIRTY - conflicts or issues exist';
              emoji = '‚ö†Ô∏è';
            } else if (blockReason === 'blocked_state') {
              reason = 'PR merge state is BLOCKED - branch protection or requirements not met';
              emoji = 'üö´';
            } else if (blockReason === 'unexpected_status') {
              reason = `Unexpected merge status: mergeable=${currentMergeable}, state=${currentMergeState}`;
              emoji = '‚ùì';
            } else if (blockReason === 'missing_test_coverage') {
              reason = 'Test coverage required for workflow changes';
              emoji = 'üß™';
            }

            console.log(`${emoji} Auto-merge blocked: ${reason}`);

            // Only comment if there's a meaningful reason
            if (arcResult === 'changes-requested' || arcResult === 'blocking-issues' || ciResult === 'failure' || conflictsExist === 'true') {
              // Get blocking issues for display
              let blockingIssuesText = '';
              if (arcResult === 'changes-requested' || arcResult === 'blocking-issues') {
                const { data: comments } = await github.rest.issues.listComments({
                  owner: context.repo.owner,
                  repo: context.repo.repo,
                  issue_number: pr_number
                });

                const arcComment = comments.find(comment =>
                  comment.user.type === 'Bot' &&
                  (comment.body.includes('ARC-Reviewer') || comment.body.includes('schema_version'))
                );

                if (arcComment) {
                  const blockingSection = arcComment.body.match(/blocking:\s*\n((?:\s*-.*\n?)*)/);
                  if (blockingSection) {
                    blockingIssuesText = '\n\n**üö® Blocking Issues to Fix:**\n```yaml\n' + blockingSection[1] + '```';
                  }
                }
              }

              // Add conflict resolution guidance for conflict-related blocks
              let conflictGuidance = '';
              if (conflictsExist === 'true') {
                const headRef = context.payload.pull_request?.head?.ref || 'your-branch';
                const baseRef = context.payload.pull_request?.base?.ref || 'main';
                conflictGuidance = '\n\nConflict Resolution Steps:\n' +
                  `1. Update your branch: git checkout ${headRef} && git fetch origin && git merge origin/${baseRef}\n` +
                  `2. Or rebase your branch: git checkout ${headRef} && git fetch origin && git rebase origin/${baseRef}\n` +
                  '3. After resolving conflicts: git add . && git commit && git push';
              }

              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: pr_number,
                body: `${emoji} **Auto-merge blocked**

                **Reason:** ${reason}

                **Detailed Status:**
                - CI Result: ${ciResult}
                - ARC-Reviewer: ${arcResult}
                - Current Mergeable: ${currentMergeable}
                - Current Merge State: ${currentMergeState}
                - Conflicts Detected: ${conflictsExist}
                - Block Reason: ${blockReason}${blockingIssuesText}${conflictGuidance}

                Please address the issues above and the auto-merge will be re-evaluated.

                _This is an automated message from the auto-merge workflow._`
              });
            }

      - name: Summary
        if: always()
        run: |
          echo "üîç Auto-merge workflow summary:"
          echo "- PR Number: ${{ steps.pr-parsed.outputs.pr_number }}"
          echo "- CI Result: ${{ steps.wait-ci.outputs.result }}"
          echo "- ARC-Reviewer: ${{ steps.arc-verdict.outputs.result }}"
          echo "- Test Coverage: ${{ steps.test-coverage.outputs.tests_found }}"
          echo "- Mergeable: ${{ steps.pr-parsed.outputs.mergeable }}"
          echo "- Auto-merge enabled: ${{ steps.enable-auto-merge.outputs.result }}"
