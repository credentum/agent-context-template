---
###############################################################################
# ARC Follow-up Issue Processor
# Intelligently processes ARC-Reviewer automation comments to create GitHub issues
# Prevents duplicate issue creation through comprehensive state validation
###############################################################################
name: ARC Follow-up Issue Processor

on:
  # TEMPORARILY DISABLED - being replaced by ai-pr-monitor.yml (Issue #173)
  # schedule:
  #   # Run every 15 minutes during business hours (UTC)
  #   - cron: '*/15 6-22 * * 1-5'
  #   # Run every 30 minutes during off-hours
  #   - cron: '*/30 22-6 * * *'
  #   - cron: '*/30 * * * 0,6'
  workflow_dispatch:
    inputs:
      pr_number:
        description: 'Specific PR number to process (optional)'
        required: false
        type: string
      dry_run:
        description: 'Dry run mode - analyze but do not create issues'
        required: false
        type: boolean
        default: false

permissions:
  contents: read
  issues: write
  pull-requests: write

env:
  # Time window for processing recent comments (minutes)
  COMMENT_WINDOW_MINUTES: 30
  # Maximum issues to create per run (safety limit)
  MAX_ISSUES_PER_RUN: 10

jobs:
  process-arc-follow-ups:
    name: "ü§ñ Process ARC Follow-ups"
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Setup GitHub CLI
        run: |
          # Verify gh CLI is available and authenticated
          gh --version
          gh auth status

      - name: Find PRs with recent ARC comments
        id: find-prs
        run: |
          echo "üîç Finding PRs with recent ARC-AUTOMATION comments..."

          # Calculate time threshold
          threshold_time=$(date -d "${{ env.COMMENT_WINDOW_MINUTES }} minutes ago" -u +"%Y-%m-%dT%H:%M:%SZ")
          echo "Looking for comments updated after: $threshold_time"

          # Specific PR mode
          if [ -n "${{ github.event.inputs.pr_number }}" ]; then
            echo "Processing specific PR: ${{ github.event.inputs.pr_number }}"
            echo "prs=${{ github.event.inputs.pr_number }}" >> $GITHUB_OUTPUT
            exit 0
          fi

          # Find recent PRs with ARC-AUTOMATION comments
          recent_prs=$(gh api graphql -f query='
            query($owner: String!, $repo: String!, $since: DateTime!) {
              repository(owner: $owner, name: $repo) {
                pullRequests(first: 50, states: [OPEN], orderBy: {field: UPDATED_AT, direction: DESC}) {
                  nodes {
                    number
                    updatedAt
                    comments(last: 10) {
                      nodes {
                        body
                        updatedAt
                        author {
                          login
                        }
                      }
                    }
                  }
                }
              }
            }' \
            -f owner="${{ github.repository_owner }}" \
            -f repo="${{ github.event.repository.name }}" \
            -f since="$threshold_time" \
            --jq '.data.repository.pullRequests.nodes[] |
              select(.comments.nodes[] |
                select(.body | contains("ARC-AUTOMATION")) |
                select(.updatedAt > "'$threshold_time'")) |
              .number' | tr '\n' ' ')

          if [ -z "$recent_prs" ]; then
            echo "No PRs found with recent ARC-AUTOMATION comments"
            echo "prs=" >> $GITHUB_OUTPUT
          else
            echo "Found PRs with recent ARC comments: $recent_prs"
            echo "prs=$recent_prs" >> $GITHUB_OUTPUT
          fi

      - name: Process ARC automation comments
        if: steps.find-prs.outputs.prs != ''
        run: |
          echo "ü§ñ Processing ARC automation comments..."

          dry_run_mode="${{ github.event.inputs.dry_run }}"
          if [ "$dry_run_mode" = "true" ]; then
            echo "üß™ DRY RUN MODE - No issues will be created"
          fi

          issue_count=0
          max_issues=${{ env.MAX_ISSUES_PER_RUN }}

          for pr_number in ${{ steps.find-prs.outputs.prs }}; do
            echo ""
            echo "üìã Processing PR #$pr_number"
            echo "================================"

            # Get latest ARC-AUTOMATION comment
            latest_arc_comment=$(gh api repos/${{ github.repository }}/issues/$pr_number/comments \
              --jq '.[] | select(.body | contains("ARC-AUTOMATION")) | .body' | tail -1)

            if [ -z "$latest_arc_comment" ]; then
              echo "No ARC-AUTOMATION comment found in PR #$pr_number"
              continue
            fi

            # Extract YAML block from comment
            yaml_content=$(echo "$latest_arc_comment" | sed -n '/```yaml/,/```/p' | sed '1d;$d')

            if [ -z "$yaml_content" ]; then
              echo "No YAML content found in ARC-AUTOMATION comment"
              continue
            fi

            # Save YAML to temporary file for processing
            echo "$yaml_content" > /tmp/arc_issues_$pr_number.yaml

            # Validate YAML structure
            if ! python3 -c "import yaml; yaml.safe_load(open('/tmp/arc_issues_$pr_number.yaml'))" 2>/dev/null; then
              echo "‚ö†Ô∏è Invalid YAML structure in PR #$pr_number"
              continue
            fi

            # Process each automated issue using Python script
            python3 << 'EOF'
          import yaml
          import json
          import subprocess
          import sys
          import re

          pr_number = $pr_number
          dry_run = "$dry_run_mode" == "true"
          max_issues = int("$max_issues")
          current_count = int("$issue_count")

          def run_gh_command(cmd):
              """Run gh command and return output"""
              result = subprocess.run(cmd, shell=True, capture_output=True, text=True)
              if result.returncode != 0:
                  print(f"Error running command: {cmd}")
                  print(f"Error: {result.stderr}")
                  return None
              return result.stdout.strip()

          def check_resolved_in_pr(pr_num, issue_title):
              """Check if issue appears to be resolved in the PR"""
              # Get PR details
              pr_data = run_gh_command(f'gh pr view {pr_num} --json title,body,commits')
              if not pr_data:
                  return False

              pr_info = json.loads(pr_data)

              # Check PR title and body for resolution keywords
              search_text = (pr_info.get('title', '') + ' ' + pr_info.get('body', '')).lower()
              issue_keywords = issue_title.lower().split()

              # If significant keywords from issue title appear in PR, likely resolved
              keyword_matches = sum(1 for keyword in issue_keywords if len(keyword) > 3 and keyword in search_text)
              if keyword_matches >= 2:
                  print(f"  üîó Issue appears resolved in PR: {keyword_matches} keyword matches")
                  return True

              return False

          def check_existing_issue(title):
              """Check if an issue with similar title already exists"""
              # Search for existing issues with similar title
              escaped_title = title.replace('"', '\\"')
              search_result = run_gh_command(f'gh issue list --search "{escaped_title}" --json number,title,state')

              if not search_result:
                  return None

              issues = json.loads(search_result)

              # Check for exact or very similar matches
              for issue in issues:
                  if issue['state'] == 'open':
                      # Simple similarity check - if 80% of words match
                      issue_words = set(issue['title'].lower().split())
                      title_words = set(title.lower().split())

                      if len(title_words) > 0:
                          similarity = len(issue_words.intersection(title_words)) / len(title_words)
                          if similarity >= 0.8:
                              print(f"  üîç Similar existing issue found: #{issue['number']} - {issue['title']}")
                              return issue['number']

              return None

          def create_github_issue(title, description, labels=None):
              """Create a GitHub issue"""
              global current_count, max_issues

              if current_count >= max_issues:
                  print(f"‚ö†Ô∏è Maximum issue limit reached ({max_issues})")
                  return None

              if dry_run:
                  print(f"  üß™ DRY RUN: Would create issue - {title}")
                  return "dry-run"

              # Prepare labels
              label_args = ""
              if labels:
                  label_list = ",".join(labels)
                  label_args = f'--label "{label_list}"'

              # Create issue
              escaped_title = title.replace('"', '\\"')
              escaped_body = description.replace('"', '\\"').replace('\n', '\\n')

              cmd = f'gh issue create --title "{escaped_title}" --body "{escaped_body}" {label_args} --json number'
              result = run_gh_command(cmd)

              if result:
                  issue_data = json.loads(result)
                  current_count += 1
                  print(f"  ‚úÖ Created issue #{issue_data['number']}: {title}")
                  return issue_data['number']
              else:
                  print(f"  ‚ùå Failed to create issue: {title}")
                  return None

          # Load and process YAML
          try:
              with open(f'/tmp/arc_issues_{pr_number}.yaml', 'r') as f:
                  data = yaml.safe_load(f)

              if not data or 'automated_issues' not in data:
                  print("No automated_issues found in YAML")
                  sys.exit(0)

              issues_to_create = []
              issues_skipped = []

              for issue_data in data['automated_issues']:
                  title = issue_data.get('title', '').strip()
                  description = issue_data.get('description', '').strip()
                  labels = issue_data.get('labels', [])

                  if not title:
                      print("Skipping issue with empty title")
                      continue

                  print(f"\nüìù Analyzing: {title}")

                  # Check 1: Is it resolved in the PR?
                  if check_resolved_in_pr(pr_number, title):
                      issues_skipped.append(f"  ‚è≠Ô∏è {title} (resolved in PR)")
                      continue

                  # Check 2: Does similar issue already exist?
                  existing_issue = check_existing_issue(title)
                  if existing_issue:
                      issues_skipped.append(f"  ‚è≠Ô∏è {title} (exists as #{existing_issue})")
                      continue

                  # Check 3: All validations passed - queue for creation
                  issues_to_create.append({
                      'title': title,
                      'description': description,
                      'labels': labels
                  })

              print(f"\nüìä Analysis Results for PR #{pr_number}:")
              print(f"  Issues to create: {len(issues_to_create)}")
              print(f"  Issues skipped: {len(issues_skipped)}")

              if issues_skipped:
                  print("  Skipped issues:")
                  for skipped in issues_skipped:
                      print(skipped)

              # Create issues
              created_issues = []
              for issue in issues_to_create:
                  issue_number = create_github_issue(
                      issue['title'],
                      issue['description'],
                      issue['labels']
                  )
                  if issue_number:
                      created_issues.append(f"#{issue_number}")

              # Update counter for shell script
              print(f"\n# SHELL_VARS")
              print(f"issue_count={current_count}")
              print(f"created_count={len(created_issues)}")
              print(f"skipped_count={len(issues_skipped)}")

              # Post summary to PR
              if created_issues and not dry_run:
                  summary = f"ü§ñ **ARC Follow-up Processor** - Processed automation items from latest ARC review\\n\\n"
                  if created_issues:
                      summary += f"**‚úÖ Created Issues:** {', '.join(created_issues)}\\n"
                  if issues_skipped:
                      summary += f"**‚è≠Ô∏è Skipped:** {len(issues_skipped)} items (resolved or duplicate)\\n"
                  summary += f"\\n_Automated by ARC Follow-up Processor at {subprocess.run(['date', '-u'], capture_output=True, text=True).stdout.strip()}_"

                  cmd = f'gh pr comment {pr_number} --body "{summary}"'
                  run_gh_command(cmd)

          except Exception as e:
              print(f"Error processing YAML: {e}")
              sys.exit(1)
          EOF

            # Extract results from Python script
            shell_vars=$(python3 /tmp/process_result.py 2>/dev/null | grep "^# SHELL_VARS" -A 10 | tail -n +2)
            if [ -n "$shell_vars" ]; then
              eval "$shell_vars"
            fi

            # Clean up temp file
            rm -f /tmp/arc_issues_$pr_number.yaml

            # Check if we've hit the issue limit
            if [ "$issue_count" -ge "$max_issues" ]; then
              echo "‚ö†Ô∏è Maximum issue creation limit reached ($max_issues)"
              break
            fi
          done

          echo ""
          echo "üéâ ARC Follow-up Processing Complete"
          echo "Total issues created: $issue_count"

      - name: Summary report
        if: always()
        run: |
          echo "## ü§ñ ARC Follow-up Processor Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Run Details:**" >> $GITHUB_STEP_SUMMARY
          echo "- **Trigger**: ${{ github.event_name }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Time Window**: ${{ env.COMMENT_WINDOW_MINUTES }} minutes" >> $GITHUB_STEP_SUMMARY
          echo "- **PRs Processed**: ${{ steps.find-prs.outputs.prs }}" >> $GITHUB_STEP_SUMMARY
          echo "- **Dry Run Mode**: ${{ github.event.inputs.dry_run }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Safety Features:**" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Duplicate issue prevention" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ PR resolution detection" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Issue creation limits (${{ env.MAX_ISSUES_PER_RUN }})" >> $GITHUB_STEP_SUMMARY
          echo "- ‚úÖ Intelligent state validation" >> $GITHUB_STEP_SUMMARY
