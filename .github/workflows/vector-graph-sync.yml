name: Vector and Graph Database Sync

on:
  push:
    paths:
      - 'context/**/*.yaml'
  schedule:
    - cron: '0 */6 * * *'  # Every 6 hours
  workflow_dispatch:
    inputs:
      force_rebuild:
        description: 'Force rebuild all embeddings and graph'
        type: boolean
        default: false

permissions:
  contents: read

jobs:
  sync-databases:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    services:
      qdrant:
        image: qdrant/qdrant:v1.14.1
        ports:
          - 6333:6333
          - 6334:6334

      neo4j:
        image: neo4j:5.20.0
        ports:
          - 7687:7687
          - 7474:7474
        env:
          NEO4J_AUTH: neo4j/${{ secrets.NEO4J_TEST_PASSWORD || 'testpassword' }}
          NEO4J_ACCEPT_LICENSE_AGREEMENT: 'yes'
          NEO4J_PLUGINS: '["apoc"]'
          NEO4J_dbms_security_procedures_unrestricted: 'apoc.*'
          NEO4J_dbms_memory_heap_initial__size: '512m'
          NEO4J_dbms_memory_heap_max__size: '1G'

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Cache Python dependencies
        uses: actions/cache@v4
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt
          pip install -r requirements-dev.txt

      - name: Infrastructure health check
        env:
          NEO4J_USER: neo4j
          NEO4J_PASSWORD: ${{ secrets.NEO4J_TEST_PASSWORD || 'testpassword' }}
        run: |
          echo "Running comprehensive infrastructure health check..."
          chmod +x infra/healthcheck.sh
          ./infra/healthcheck.sh

      - name: Wait for services
        run: |
          echo "Waiting for services to be ready..."

          # Wait for Qdrant
          echo "Checking Qdrant..."
          for i in {1..60}; do
            if curl -f -s http://localhost:6333/collections >/dev/null 2>&1; then
              echo "✅ Qdrant is ready (attempt $i)"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Qdrant failed to start after 60 attempts"
              curl -v http://localhost:6333/collections || true
              exit 1
            fi
            printf "."
            sleep 2
          done

          # Wait for Neo4j
          echo "Checking Neo4j..."
          for i in {1..60}; do
            if curl -f -s http://localhost:7474 >/dev/null 2>&1; then
              echo "✅ Neo4j is ready (attempt $i)"
              break
            fi
            if [ $i -eq 60 ]; then
              echo "❌ Neo4j failed to start after 60 attempts"
              curl -v http://localhost:7474 || true
              exit 1
            fi
            printf "."
            sleep 2
          done

          echo "🎉 All services are ready!"

      - name: Initialize Qdrant
        id: init-qdrant
        run: |
          python -m src.storage.vector_db_init --skip-test || {
            echo "::warning::Failed to initialize Qdrant, will retry"
            sleep 5
            python -m src.storage.vector_db_init --skip-test
          }

      - name: Initialize Neo4j
        id: init-neo4j
        env:
          NEO4J_TEST_PASSWORD: ${{ secrets.NEO4J_TEST_PASSWORD || 'testpassword' }}
        run: |
          python -m src.storage.neo4j_init --username neo4j --password "$NEO4J_TEST_PASSWORD" || {
            echo "::warning::Failed to initialize Neo4j, will retry"
            sleep 5
            python -m src.storage.neo4j_init --username neo4j --password "$NEO4J_TEST_PASSWORD"
          }

      - name: Sync vector embeddings
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
        run: |
          if [ -z "$OPENAI_API_KEY" ]; then
            echo "Warning: OPENAI_API_KEY not set, skipping vector embeddings"
            exit 0
          fi

          if [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            echo "Force rebuilding all embeddings..."
            python -m src.storage.hash_diff_embedder context/ --force --verbose
          else
            echo "Syncing changed documents..."
            python -m src.storage.hash_diff_embedder context/ --cleanup --verbose
          fi

      - name: Build context graph
        env:
          NEO4J_TEST_PASSWORD: ${{ secrets.NEO4J_TEST_PASSWORD || 'testpassword' }}
        run: |
          if [ "${{ github.event.inputs.force_rebuild }}" == "true" ]; then
            echo "Force rebuilding entire graph..."
            python -m src.storage.graph_builder context/ --username neo4j --password "$NEO4J_TEST_PASSWORD" --force --cleanup --verbose
          else
            echo "Updating graph with changes..."
            python -m src.storage.graph_builder context/ --username neo4j --password "$NEO4J_TEST_PASSWORD" --cleanup --verbose
          fi

      - name: Generate sync report
        if: always()
        run: |
          echo "## Vector and Graph Sync Report" > sync_report.md
          echo "" >> sync_report.md
          echo "**Timestamp:** $(date -u '+%Y-%m-%d %H:%M:%S UTC')" >> sync_report.md
          echo "" >> sync_report.md

          # Vector stats
          if [ -f "context/.embeddings_cache/hash_cache.json" ]; then
            echo "### Vector Embeddings" >> sync_report.md
            echo "- Cache entries: $(jq 'length' context/.embeddings_cache/hash_cache.json)" >> sync_report.md
            echo "" >> sync_report.md
          fi

          # Graph stats
          if [ -f "context/.graph_cache/processed.json" ]; then
            echo "### Graph Nodes" >> sync_report.md
            echo "- Processed documents: $(jq 'length' context/.graph_cache/processed.json)" >> sync_report.md
            echo "" >> sync_report.md
          fi

          # Show statistics
          echo "### Database Statistics" >> sync_report.md
          python -m src.analytics.sum_scores_api stats || echo "- Vector stats unavailable"
          echo "" >> sync_report.md
          python -m src.storage.graph_builder context/ --stats --username neo4j --password "${NEO4J_TEST_PASSWORD:-testpassword}" || echo "- Graph stats unavailable"

      - name: Upload sync report
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: vector-graph-sync-report
          path: sync_report.md
          retention-days: 7

      - name: Cache embedding hashes
        uses: actions/cache@v4
        with:
          path: context/.embeddings_cache
          key: ${{ runner.os }}-embeddings-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-embeddings-

      - name: Cache graph processed docs
        uses: actions/cache@v4
        with:
          path: context/.graph_cache
          key: ${{ runner.os }}-graph-${{ github.sha }}
          restore-keys: |
            ${{ runner.os }}-graph-
