#!/usr/bin/env python3
"""
Test script for ARC Follow-up Processor
Creates mock ARC-AUTOMATION comments for testing
"""

import argparse
import subprocess
import sys
from datetime import datetime
from typing import Any, Dict, List


class ARCProcessorTester:
    def __init__(self, repo: str, pr_number: int):
        """Initialize tester with repository and PR number"""
        self.repo = repo
        self.pr_number = pr_number

    def create_mock_arc_comment(self, issues: List[Dict[str, Any]]) -> str:
        """Create a mock ARC-AUTOMATION comment with test issues"""

        # Build YAML content
        yaml_content = "automated_issues:\n"
        for issue in issues:
            yaml_content += f"  - title: \"{issue['title']}\"\n"
            yaml_content += "    description: |\n"
            for line in issue["description"].split("\n"):
                yaml_content += f"      {line}\n"
            if issue.get("labels"):
                yaml_content += f"    labels: {issue['labels']}\n"
            yaml_content += "\n"

        # Create full comment
        comment_body = f"""ü§ñ **ARC-Reviewer Analysis Complete**

Based on my review of this PR, I've identified several items that need \
follow-up attention:

```yaml
{yaml_content}```

**Review Summary:**
- Issues requiring follow-up: {len(issues)}
- Priority: Mixed (see individual items)
- Automated processing: Enabled

*This comment will be processed by the ARC Follow-up Processor to \
automatically create GitHub issues for unresolved items.*

---
*Generated by ARC-Reviewer at {datetime.now().isoformat()}*
"""

        return comment_body

    def post_comment(self, comment_body: str, dry_run: bool = False) -> bool:
        """Post comment to PR"""
        if dry_run:
            print("üß™ DRY RUN - Would post comment:")
            print("=" * 60)
            print(comment_body)
            print("=" * 60)
            return True

        try:
            # Use gh CLI to post comment
            cmd = [
                "gh",
                "pr",
                "comment",
                str(self.pr_number),
                "--repo",
                self.repo,
                "--body",
                comment_body,
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print(f"‚úÖ Posted ARC-AUTOMATION comment to PR #{self.pr_number}")
                return True
            else:
                print(f"‚ùå Failed to post comment: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå Error posting comment: {e}")
            return False

    def trigger_workflow(self, dry_run: bool = False) -> bool:
        """Trigger the ARC follow-up processor workflow"""
        try:
            cmd = [
                "gh",
                "workflow",
                "run",
                "arc-follow-up-processor.yml",
                "--repo",
                self.repo,
                "-f",
                f"pr_number={self.pr_number}",
                "-f",
                f"dry_run={str(dry_run).lower()}",
            ]

            result = subprocess.run(cmd, capture_output=True, text=True)

            if result.returncode == 0:
                print(f"‚úÖ Triggered ARC Follow-up Processor workflow " f"(dry_run={dry_run})")
                return True
            else:
                print(f"‚ùå Failed to trigger workflow: {result.stderr}")
                return False

        except Exception as e:
            print(f"‚ùå Error triggering workflow: {e}")
            return False


def get_test_scenarios() -> Dict[str, List[Dict[str, Any]]]:
    """Get predefined test scenarios"""
    return {
        "basic": [
            {
                "title": "Add input validation to user registration",
                "description": (
                    "The user registration endpoint lacks proper input "
                    "validation.\n\n"
                    "Required changes:\n- Validate email format\n"
                    "- Check password strength\n- Sanitize username input"
                ),
                "labels": ["security", "enhancement"],
            },
            {
                "title": "Fix memory leak in background worker",
                "description": (
                    "Background worker shows increasing memory usage over "
                    "time.\n\n"
                    "Investigation needed:\n- Profile memory usage patterns\n"
                    "- Identify leak sources\n- Implement proper cleanup"
                ),
                "labels": ["bug", "performance"],
            },
        ],
        "duplicates": [
            {
                "title": "Improve test coverage for validators module",
                "description": (
                    "Current test coverage is below target threshold.\n\n"
                    "This is likely a duplicate since coverage work is "
                    "ongoing."
                ),
                "labels": ["testing"],
            },
            {
                "title": "Update documentation for CI optimization",
                "description": (
                    "CI optimization changes need documentation updates.\n\n"
                    "This should already be handled in the current PR."
                ),
                "labels": ["documentation"],
            },
        ],
        "mixed": [
            {
                "title": "Add rate limiting to API endpoints",
                "description": (
                    "API endpoints need rate limiting for security.\n\n"
                    "New requirement not covered in current PR."
                ),
                "labels": ["security", "enhancement"],
            },
            {
                "title": "Fix Docker image pinning issues",
                "description": (
                    "Some Docker images are not properly pinned.\n\n"
                    "This appears to be resolved in the current PR already."
                ),
                "labels": ["security", "docker"],
            },
            {
                "title": "Implement comprehensive logging",
                "description": (
                    "Add structured logging throughout the application.\n\n"
                    "New feature request for future development."
                ),
                "labels": ["enhancement", "observability"],
            },
        ],
    }


def main():
    parser = argparse.ArgumentParser(description="Test ARC Follow-up Processor")
    parser.add_argument("--repo", required=True, help="Repository (owner/name)")
    parser.add_argument("--pr", type=int, required=True, help="PR number")
    parser.add_argument(
        "--scenario",
        choices=["basic", "duplicates", "mixed"],
        default="mixed",
        help="Test scenario",
    )
    parser.add_argument(
        "--dry-run",
        action="store_true",
        help="Don't actually post comment or trigger workflow",
    )
    parser.add_argument(
        "--comment-only",
        action="store_true",
        help="Only post comment, don't trigger workflow",
    )
    parser.add_argument(
        "--workflow-only",
        action="store_true",
        help="Only trigger workflow (assumes comment exists)",
    )

    args = parser.parse_args()

    print("üß™ Testing ARC Follow-up Processor")
    print(f"Repository: {args.repo}")
    print(f"PR: #{args.pr}")
    print(f"Scenario: {args.scenario}")
    print(f"Dry run: {args.dry_run}")
    print("=" * 50)

    tester = ARCProcessorTester(args.repo, args.pr)
    scenarios = get_test_scenarios()
    test_issues = scenarios[args.scenario]

    success = True

    # Post comment (unless workflow-only)
    if not args.workflow_only:
        print(f"\nüìù Creating mock ARC-AUTOMATION comment with " f"{len(test_issues)} issues...")
        comment_body = tester.create_mock_arc_comment(test_issues)

        if not tester.post_comment(comment_body, args.dry_run):
            success = False

    # Trigger workflow (unless comment-only)
    if not args.comment_only and success:
        print("\nüöÄ Triggering ARC Follow-up Processor workflow...")

        if not tester.trigger_workflow(args.dry_run):
            success = False

    if success:
        print("\nüéâ Test completed successfully!")
        if not args.dry_run:
            print(f"üí° Check PR #{args.pr} for the ARC comment and workflow " f"results")
            print(
                f"üí° Monitor: https://github.com/{args.repo}/actions/workflows/"
                f"arc-follow-up-processor.yml"
            )
    else:
        print("\n‚ùå Test failed!")
        sys.exit(1)


if __name__ == "__main__":
    main()
